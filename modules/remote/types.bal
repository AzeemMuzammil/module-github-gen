// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/constraint;
import ballerina/http;

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    ClientHttp1Settings http1Settings?;
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings?;
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 60;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache?;
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits?;
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
|};

# Provides settings related to HTTP/1.x protocol.
public type ClientHttp1Settings record {|
    # Specifies whether to reuse a connection for multiple requests
    http:KeepAlive keepAlive = http:KEEPALIVE_AUTO;
    # The chunking behaviour of the request
    http:Chunking chunking = http:CHUNKING_AUTO;
    # Proxy server related options
    ProxyConfig proxy?;
|};

# Proxy server configurations to be used with the HTTP client endpoint.
public type ProxyConfig record {|
    # Host name of the proxy server
    string host = "";
    # Proxy server port
    int port = 0;
    # Proxy server username
    string userName = "";
    # Proxy server password
    @display {label: "", kind: "password"}
    string password = "";
|};

public type SecurityAndAnalysis record {
    Securityandanalysis_advanced_security advanced_security?;
    # Enable or disable Dependabot security updates for the repository.
    Securityandanalysis_dependabot_security_updates dependabot_security_updates?;
    Securityandanalysis_advanced_security secret_scanning?;
    Securityandanalysis_advanced_security secret_scanning_push_protection?;
};

public type Branch_rename_body record {
    # The new name of the branch.
    string new_name;
};

public type Hook_id_config_body_1 record {|
    # The URL to which the payloads will be delivered.
    WebhookConfigUrl url?;
    # The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
    WebhookConfigContentType content_type?;
    # If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
    WebhookConfigSecret secret?;
    WebhookConfigInsecureSsl insecure_ssl?;
|};

# A GitHub App that is providing a custom deployment protection rule.
public type CustomDeploymentRuleApp record {
    # The unique identifier of the deployment protection rule integration.
    int id;
    # The slugified name of the deployment protection rule integration.
    string slug;
    # The URL for the endpoint to get details about the app.
    string integration_url;
    # The node ID for the deployment protection rule integration.
    string node_id;
};

# The status of a commit.
public type Status record {
    string url;
    string? avatar_url;
    int id;
    string node_id;
    string state;
    string? description;
    string? target_url;
    string context;
    string created_at;
    string updated_at;
    # A GitHub user.
    NullableSimpleUser? creator;
};

public type Protectedbranch_required_conversation_resolution record {|
    boolean enabled?;
|};

public type Branchprotection_required_signatures record {
    string url;
    boolean enabled;
};

# Code of Conduct Simple
public type NullableCodeOfConductSimple record {
    string url;
    string 'key;
    string name;
    string? html_url;
};

# View Traffic
public type ViewTraffic record {
    int count;
    int uniques;
    Traffic[] views;
};

# Commit Comparison
public type CommitComparison record {
    string url;
    string html_url;
    string permalink_url;
    string diff_url;
    string patch_url;
    Commit base_commit;
    Commit merge_base_commit;
    "diverged"|"ahead"|"behind"|"identical" status;
    int ahead_by;
    int behind_by;
    int total_commits;
    Commit[] commits;
    DiffEntry[] files?;
};

# Details of a deployment branch or tag policy.
public type DeploymentBranchPolicy record {
    # The unique identifier of the branch or tag policy.
    int id?;
    string node_id?;
    # The name pattern that branches or tags must match in order to deploy to the environment.
    string name?;
    # Whether this rule targets a branch or tag.
    "branch"|"tag" 'type?;
};

public type Protectedbranch_required_pull_request_reviews_bypass_pull_request_allowances record {
    SimpleUser[] users;
    Team[] teams;
    Integration[] apps?;
};

# Full Repository
public type FullRepository record {
    int id;
    string node_id;
    string name;
    string full_name;
    # A GitHub user.
    SimpleUser owner;
    boolean 'private;
    string html_url;
    string? description;
    boolean 'fork;
    string url;
    string archive_url;
    string assignees_url;
    string blobs_url;
    string branches_url;
    string collaborators_url;
    string comments_url;
    string commits_url;
    string compare_url;
    string contents_url;
    string contributors_url;
    string deployments_url;
    string downloads_url;
    string events_url;
    string forks_url;
    string git_commits_url;
    string git_refs_url;
    string git_tags_url;
    string git_url;
    string issue_comment_url;
    string issue_events_url;
    string issues_url;
    string keys_url;
    string labels_url;
    string languages_url;
    string merges_url;
    string milestones_url;
    string notifications_url;
    string pulls_url;
    string releases_url;
    string ssh_url;
    string stargazers_url;
    string statuses_url;
    string subscribers_url;
    string subscription_url;
    string tags_url;
    string teams_url;
    string trees_url;
    string clone_url;
    string? mirror_url;
    string hooks_url;
    string svn_url;
    string? homepage;
    string? language;
    int forks_count;
    int stargazers_count;
    int watchers_count;
    # The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
    int size;
    string default_branch;
    int open_issues_count;
    boolean is_template?;
    string[] topics?;
    boolean has_issues;
    boolean has_projects;
    boolean has_wiki;
    boolean has_pages;
    boolean has_downloads?;
    boolean has_discussions;
    boolean archived;
    # Returns whether or not this repository disabled.
    boolean disabled;
    # The repository visibility: public, private, or internal.
    string visibility?;
    string pushed_at;
    string created_at;
    string updated_at;
    Fullrepository_permissions permissions?;
    boolean allow_rebase_merge?;
    # A repository on GitHub.
    NullableRepository? template_repository?;
    string? temp_clone_token?;
    boolean allow_squash_merge?;
    boolean allow_auto_merge?;
    boolean delete_branch_on_merge?;
    boolean allow_merge_commit?;
    boolean allow_update_branch?;
    boolean use_squash_pr_title_as_default?;
    # The default value for a squash merge commit title:
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
    "PR_TITLE"|"COMMIT_OR_PR_TITLE" squash_merge_commit_title?;
    # The default value for a squash merge commit message:
    # 
    # - `PR_BODY` - default to the pull request's body.
    # - `COMMIT_MESSAGES` - default to the branch's commit messages.
    # - `BLANK` - default to a blank commit message.
    "PR_BODY"|"COMMIT_MESSAGES"|"BLANK" squash_merge_commit_message?;
    # The default value for a merge commit title.
    # 
    #   - `PR_TITLE` - default to the pull request's title.
    #   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
    "PR_TITLE"|"MERGE_MESSAGE" merge_commit_title?;
    # The default value for a merge commit message.
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `PR_BODY` - default to the pull request's body.
    # - `BLANK` - default to a blank commit message.
    "PR_BODY"|"PR_TITLE"|"BLANK" merge_commit_message?;
    boolean allow_forking?;
    boolean web_commit_signoff_required?;
    int subscribers_count;
    int network_count;
    # License Simple
    NullableLicenseSimple? license;
    # A GitHub user.
    NullableSimpleUser? organization?;
    # A git repository
    Repository parent?;
    # A git repository
    Repository 'source?;
    int forks;
    string master_branch?;
    int open_issues;
    int watchers;
    # Whether anonymous git access is allowed.
    boolean anonymous_access_enabled = true;
    # Code of Conduct Simple
    CodeOfConductSimple code_of_conduct?;
    SecurityAndAnalysis? security_and_analysis?;
};

public type Filecommit_commit_parents record {
    string url?;
    string html_url?;
    string sha?;
};

public type Branch_protection_body record {
    # Require status checks to pass before merging. Set to `null` to disable.
    Reposownerrepobranchesbranchprotection_required_status_checks? required_status_checks;
    # Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.
    boolean? enforce_admins;
    # Require at least one approving review on a pull request, before merging. Set to `null` to disable.
    Reposownerrepobranchesbranchprotection_required_pull_request_reviews? required_pull_request_reviews;
    # Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.
    Reposownerrepobranchesbranchprotection_restrictions? restrictions;
    # Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation.
    boolean required_linear_history?;
    # Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation."
    boolean? allow_force_pushes?;
    # Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation.
    boolean allow_deletions?;
    # If set to `true`, the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to `true` to restrict new branch creation. Default: `false`.
    boolean block_creations?;
    # Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`.
    boolean required_conversation_resolution?;
    # Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. Default: `false`.
    boolean lock_branch = false;
    # Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. Default: `false`.
    boolean allow_fork_syncing = false;
};

# Deployment protection rule
public type DeploymentProtectionRule record {
    # The unique identifier for the deployment protection rule.
    int id;
    # The node ID for the deployment protection rule.
    string node_id;
    # Whether the deployment protection rule is enabled for the environment.
    boolean enabled;
    # A GitHub App that is providing a custom deployment protection rule.
    CustomDeploymentRuleApp app;
};

# Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
public type Branchprotection_lock_branch record {
    boolean enabled?;
};

public type Reposownerrepoenvironmentsenvironment_name_reviewers record {
    # The type of reviewer.
    DeploymentReviewerType 'type?;
    # The id of the user or team who can review the deployment
    int id?;
};

public type Collaborators_username_body_1 record {
    # The permission to grant the collaborator. **Only valid on organization-owned repositories.** We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any.
    string permission?;
};

public type Branchrestrictionpolicy_permissions record {
    string metadata?;
    string contents?;
    string issues?;
    string single_file?;
};

public type Repo_deployments_body record {
    # The ref to deploy. This can be a branch, tag, or SHA.
    string ref;
    # Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).
    string task = "deploy";
    # Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
    boolean auto_merge = true;
    # The [status](https://docs.github.com/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.
    string[] required_contexts?;
    record {}|string payload?;
    # Name for the target deployment environment (e.g., `production`, `staging`, `qa`).
    string environment = "production";
    # Short description of the deployment.
    string? description = "";
    # Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`
    boolean transient_environment = false;
    # Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.
    boolean production_environment?;
};

# Status Check Policy
public type StatusCheckPolicy record {
    string url;
    boolean strict;
    string[] contexts;
    Statuscheckpolicy_checks[] checks;
    string contexts_url;
};

public type Repositoryrulerequiredstatuschecks_parameters record {
    # Status checks that are required.
    RepositoryRuleParamsStatusCheckConfiguration[] required_status_checks;
    # Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled.
    boolean strict_required_status_checks_policy;
};

public type SimpleCommitStatus record {
    string? description;
    int id;
    string node_id;
    string state;
    string context;
    string? target_url;
    boolean? required?;
    string? avatar_url;
    string url;
    string created_at;
    string updated_at;
};

public type Statuscheckpolicy_checks record {
    string context;
    int? app_id;
};

public type Repo_releases_body record {
    # The name of the tag.
    string tag_name;
    # Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.
    string target_commitish?;
    # The name of the release.
    string name?;
    # Text describing the contents of the tag.
    string body?;
    # `true` to create a draft (unpublished) release, `false` to create a published one.
    boolean draft = false;
    # `true` to identify the release as a prerelease. `false` to identify the release as a full release.
    boolean prerelease = false;
    # If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
    string discussion_category_name?;
    # Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
    boolean generate_release_notes = false;
    # Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
    "true"|"false"|"legacy" make_latest = "true";
};

# The GitHub Pages deployment status.
public type PageDeployment record {
    # The URI to monitor GitHub Pages deployment status.
    string status_url;
    # The URI to the deployed GitHub Pages.
    string page_url;
    # The URI to the deployed GitHub Pages preview.
    string preview_url?;
};

public type Restrictions_users_body record {
    # The username for users
    string[] users;
}|string[];

# Code of Conduct Simple
public type CodeOfConductSimple record {
    string url;
    string 'key;
    string name;
    string? html_url;
};

# object containing information about the author.
public type Reposownerrepocontentspath_author_1 record {
    # The name of the author (or committer) of the commit
    string name?;
    # The email of the author (or committer) of the commit
    string email?;
};

public type Protection_required_status_checks_body record {
    # Require branches to be up to date before merging.
    boolean strict?;
    # **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
    string[] contexts?;
    # The list of status checks to require in order to merge into this branch.
    Reposownerrepobranchesbranchprotection_required_status_checks_checks[] checks?;
};

public type Protectedbranchrequiredstatuscheck_checks record {
    string context;
    int? app_id;
};

public type Contents_path_body_1 record {
    # The commit message.
    string message;
    # The blob SHA of the file being deleted.
    string sha;
    # The branch name. Default: the repository’s default branch
    string branch?;
    # object containing information about the committer.
    Reposownerrepocontentspath_committer_1 committer?;
    # object containing information about the author.
    Reposownerrepocontentspath_author_1 author?;
};

public type License record {
    string 'key;
    string name;
    string node_id;
    string spdx_id;
    string? url;
};

public type Restrictions_teams_body record {
    # The slug values for teams
    string[] teams;
}|string[];

public type Commit_sha_comments_body record {
    # The contents of the comment.
    string body;
    # Relative path of the file to comment on.
    string path?;
    # Line index in the diff to comment on.
    int position?;
    # **Deprecated**. Use **position** parameter instead. Line number in the file to comment on.
    int line?;
};

# Choose which environments must be successfully deployed to before refs can be merged into a branch that matches this rule.
public type RepositoryRuleRequiredDeployments record {
    "required_deployments" 'type;
    Repositoryrulerequireddeployments_parameters parameters?;
};

# License Simple
public type NullableLicenseSimple record {
    string 'key;
    string name;
    string? url;
    string? spdx_id;
    string node_id;
    string html_url?;
};

public type ReactionRollup record {
    string url;
    int total_count;
    int \+1;
    int \-1;
    int laugh;
    int confused;
    int heart;
    int hooray;
    int eyes;
    int rocket;
};

public type Owner_repo_body_1 record {
    # The name of the repository.
    string name?;
    # A short description of the repository.
    string description?;
    # A URL with more information about the repository.
    string homepage?;
    # Either `true` to make the repository private or `false` to make it public. Default: `false`.  
    # **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
    boolean 'private?;
    # The visibility of the repository.
    "public"|"private" visibility?;
    # Specify which security and analysis features to enable or disable for the repository.
    # 
    # To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
    # 
    # For example, to enable GitHub Advanced Security, use this data in the body of the `PATCH` request:
    # `{ "security_and_analysis": {"advanced_security": { "status": "enabled" } } }`.
    # 
    # You can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.
    Reposownerrepo_security_and_analysis? security_and_analysis?;
    # Either `true` to enable issues for this repository or `false` to disable them.
    boolean has_issues?;
    # Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
    boolean has_projects?;
    # Either `true` to enable the wiki for this repository or `false` to disable it.
    boolean has_wiki?;
    # Either `true` to make this repo available as a template repository or `false` to prevent it.
    boolean is_template?;
    # Updates the default branch for this repository.
    string default_branch?;
    # Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
    boolean allow_squash_merge?;
    # Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
    boolean allow_merge_commit?;
    # Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
    boolean allow_rebase_merge?;
    # Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
    boolean allow_auto_merge?;
    # Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
    boolean delete_branch_on_merge?;
    # Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.
    boolean allow_update_branch?;
    # Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
    boolean use_squash_pr_title_as_default?;
    # The default value for a squash merge commit title:
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
    "PR_TITLE"|"COMMIT_OR_PR_TITLE" squash_merge_commit_title?;
    # The default value for a squash merge commit message:
    # 
    # - `PR_BODY` - default to the pull request's body.
    # - `COMMIT_MESSAGES` - default to the branch's commit messages.
    # - `BLANK` - default to a blank commit message.
    "PR_BODY"|"COMMIT_MESSAGES"|"BLANK" squash_merge_commit_message?;
    # The default value for a merge commit title.
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
    "PR_TITLE"|"MERGE_MESSAGE" merge_commit_title?;
    # The default value for a merge commit message.
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `PR_BODY` - default to the pull request's body.
    # - `BLANK` - default to a blank commit message.
    "PR_BODY"|"PR_TITLE"|"BLANK" merge_commit_message?;
    # Whether to archive this repository. `false` will unarchive a previously archived repository.
    boolean archived?;
    # Either `true` to allow private forks, or `false` to prevent private forks.
    boolean allow_forking?;
    # Either `true` to require contributors to sign off on web-based commits, or `false` to not require contributors to sign off on web-based commits.
    boolean web_commit_signoff_required?;
};

public type Thread_subject record {
    string title;
    string url;
    string latest_comment_url;
    string 'type;
};

# Require at least one approving review on a pull request, before merging. Set to `null` to disable.
public type Reposownerrepobranchesbranchprotection_required_pull_request_reviews record {
    # Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
    Reposownerrepobranchesbranchprotection_required_pull_request_reviews_dismissal_restrictions dismissal_restrictions?;
    # Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
    boolean dismiss_stale_reviews?;
    # Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them.
    boolean require_code_owner_reviews?;
    # Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
    int required_approving_review_count?;
    # Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`.
    boolean require_last_push_approval?;
    # Allow specific users, teams, or apps to bypass pull request requirements.
    Reposownerrepobranchesbranchprotection_required_pull_request_reviews_bypass_pull_request_allowances bypass_pull_request_allowances?;
};

# Parameters to be used for the committer_email_pattern rule
public type RepositoryRuleCommitterEmailPattern record {
    "committer_email_pattern" 'type;
    Repositoryrulecommitmessagepattern_parameters parameters?;
};

# Webhooks for repositories.
public type Hook record {
    string 'type;
    # Unique identifier of the webhook.
    int id;
    # The name of a valid service, use 'web' for a webhook.
    string name;
    # Determines whether the hook is actually triggered on pushes.
    boolean active;
    # Determines what events the hook is triggered for. Default: ['push'].
    string[] events;
    Hook_config config;
    string updated_at;
    string created_at;
    string url;
    string test_url;
    string ping_url;
    string deliveries_url?;
    HookResponse last_response;
};

public type Repo_dispatches_body record {
    # A custom webhook event name. Must be 100 characters or fewer.
    @constraint:String {maxLength: 100, minLength: 1}
    string event_type;
    # JSON payload with extra information about the webhook event that your action or workflow may use. The maximum number of top-level properties is 10.
    record {} client_payload?;
};

public type Repositoryruleupdate_parameters record {
    # Branch can pull changes from its upstream repository
    boolean update_allows_fetch_and_merge;
};

public type Repo_mergeupstream_body record {
    # The name of the branch which should be updated to match upstream.
    string branch;
};

public type Repositoryruleset__links record {
    Repositoryruleset__links_self self?;
    Repositoryruleset__links_html html?;
};

# The URL to which the payloads will be delivered.
public type WebhookConfigUrl string;

# Required status check
public type RepositoryRuleParamsStatusCheckConfiguration record {
    # The status check context name that must be present on the commit.
    string context;
    # The optional integration ID that this status check must originate from.
    int integration_id?;
};

# Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
public type Protectedbranch_lock_branch record {|
    boolean enabled?;
|};

# Collaborator
public type NullableCollaborator record {
    string login;
    int id;
    string? email?;
    string? name?;
    string node_id;
    string avatar_url;
    string? gravatar_id;
    string url;
    string html_url;
    string followers_url;
    string following_url;
    string gists_url;
    string starred_url;
    string subscriptions_url;
    string organizations_url;
    string repos_url;
    string events_url;
    string received_events_url;
    string 'type;
    boolean site_admin;
    Collaborator_permissions permissions?;
    string role_name;
};

# Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
public type Reposownerrepobranchesbranchprotection_required_pull_request_reviews_dismissal_restrictions record {
    # The list of user `login`s with dismissal access
    string[] users?;
    # The list of team `slug`s with dismissal access
    string[] teams?;
    # The list of app `slug`s with dismissal access
    string[] apps?;
};

# Data related to a release.
public type ReleaseAsset record {
    string browser_download_url;
    string content_type;
    string created_at;
    int download_count;
    int id;
    string? label;
    # The file name of the asset.
    string name;
    string node_id;
    int size;
    # State of the release asset.
    "uploaded" state;
    string updated_at;
    User? uploader?;
    string url;
};

public type Environments_environment_name_body record {|
    # The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).
    WaitTimer wait_timer?;
    # Whether or not a user who created the job is prevented from approving their own job.
    PreventSelfReview prevent_self_review?;
    # The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
    Reposownerrepoenvironmentsenvironment_name_reviewers[]? reviewers?;
    # The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.
    DeploymentBranchPolicySettings? deployment_branch_policy?;
|};

public type Restrictions_teams_body_1 record {
    # The slug values for teams
    string[] teams;
}|string[];

public type Restrictions_teams_body_2 record {
    # The slug values for teams
    string[] teams;
}|string[];

# Parameters to be used for the commit_author_email_pattern rule
public type RepositoryRuleCommitAuthorEmailPattern record {
    "commit_author_email_pattern" 'type;
    Repositoryrulecommitmessagepattern_parameters parameters?;
};

# A topic aggregates entities that are related to a subject.
public type Topic record {
    string[] names;
};

# Commit Comment
public type CommitComment record {
    string html_url;
    string url;
    int id;
    string node_id;
    string body;
    string? path;
    int? position;
    int? line;
    string commit_id;
    # A GitHub user.
    NullableSimpleUser? user;
    string created_at;
    string updated_at;
    # How the author is associated with the repository.
    AuthorAssociation author_association;
    ReactionRollup reactions?;
};

# Protected Branch Pull Request Review
public type ProtectedBranchPullRequestReview record {
    string url?;
    Protectedbranchpullrequestreview_dismissal_restrictions dismissal_restrictions?;
    # Allow specific users, teams, or apps to bypass pull request requirements.
    Protectedbranchpullrequestreview_bypass_pull_request_allowances bypass_pull_request_allowances?;
    boolean dismiss_stale_reviews;
    boolean require_code_owner_reviews;
    @constraint:Int {minValue: 0, maxValue: 6}
    int required_approving_review_count?;
    # Whether the most recent push must be approved by someone other than the person who pushed it.
    boolean require_last_push_approval = false;
};

# Branch protections protect branches
public type ProtectedBranch record {
    string url;
    # Status Check Policy
    StatusCheckPolicy required_status_checks?;
    Protectedbranch_required_pull_request_reviews required_pull_request_reviews?;
    Branchprotection_required_signatures required_signatures?;
    Protectedbranch_enforce_admins enforce_admins?;
    Protectedbranch_required_linear_history required_linear_history?;
    Protectedbranch_required_linear_history allow_force_pushes?;
    Protectedbranch_required_linear_history allow_deletions?;
    # Branch Restriction Policy
    BranchRestrictionPolicy restrictions?;
    Protectedbranch_required_conversation_resolution required_conversation_resolution?;
    Protectedbranch_required_linear_history block_creations?;
    # Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
    Protectedbranch_lock_branch lock_branch?;
    # Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
    Protectedbranch_allow_fork_syncing allow_fork_syncing?;
};

# Metaproperties for Git author/committer information.
public type Committer record {
    string date?;
    string? email;
    # The git author's name.
    string name;
    string username?;
};

# Prevent merge commits from being pushed to matching refs.
public type RepositoryRuleRequiredLinearHistory record {
    "required_linear_history" 'type;
};

# The object used to create GitHub Pages deployment
public type Pages_deployment_body record {
    # The URL of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository.
    string artifact_url;
    # The target environment for this GitHub Pages deployment.
    string environment = "github-pages";
    # A unique string that represents the version of the build for this deployment.
    string pages_build_version;
    # The OIDC token issued by GitHub Actions certifying the origin of the deployment.
    string oidc_token;
};

# A repository on GitHub.
public type NullableRepository record {
    # Unique identifier of the repository
    int id;
    string node_id;
    # The name of the repository.
    string name;
    string full_name;
    # License Simple
    NullableLicenseSimple? license;
    # A GitHub user.
    NullableSimpleUser? organization?;
    int forks;
    Repository_permissions permissions?;
    # A GitHub user.
    SimpleUser owner;
    # Whether the repository is private or public.
    boolean 'private;
    string html_url;
    string? description;
    boolean 'fork;
    string url;
    string archive_url;
    string assignees_url;
    string blobs_url;
    string branches_url;
    string collaborators_url;
    string comments_url;
    string commits_url;
    string compare_url;
    string contents_url;
    string contributors_url;
    string deployments_url;
    string downloads_url;
    string events_url;
    string forks_url;
    string git_commits_url;
    string git_refs_url;
    string git_tags_url;
    string git_url;
    string issue_comment_url;
    string issue_events_url;
    string issues_url;
    string keys_url;
    string labels_url;
    string languages_url;
    string merges_url;
    string milestones_url;
    string notifications_url;
    string pulls_url;
    string releases_url;
    string ssh_url;
    string stargazers_url;
    string statuses_url;
    string subscribers_url;
    string subscription_url;
    string tags_url;
    string teams_url;
    string trees_url;
    string clone_url;
    string? mirror_url;
    string hooks_url;
    string svn_url;
    string? homepage;
    string? language;
    int forks_count;
    int stargazers_count;
    int watchers_count;
    # The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
    int size;
    # The default branch of the repository.
    string default_branch;
    int open_issues_count;
    # Whether this repository acts as a template that can be used to generate new repositories.
    boolean is_template = false;
    string[] topics?;
    # Whether issues are enabled.
    boolean has_issues;
    # Whether projects are enabled.
    boolean has_projects;
    # Whether the wiki is enabled.
    boolean has_wiki;
    boolean has_pages;
    # Whether downloads are enabled.
    boolean has_downloads;
    # Whether discussions are enabled.
    boolean has_discussions = false;
    # Whether the repository is archived.
    boolean archived;
    # Returns whether or not this repository disabled.
    boolean disabled;
    # The repository visibility: public, private, or internal.
    string visibility = "public";
    string? pushed_at;
    string? created_at;
    string? updated_at;
    # Whether to allow rebase merges for pull requests.
    boolean allow_rebase_merge = true;
    Repository_template_repository? template_repository?;
    string temp_clone_token?;
    # Whether to allow squash merges for pull requests.
    boolean allow_squash_merge = true;
    # Whether to allow Auto-merge to be used on pull requests.
    boolean allow_auto_merge = false;
    # Whether to delete head branches when pull requests are merged
    boolean delete_branch_on_merge = false;
    # Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
    boolean allow_update_branch = false;
    # Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
    boolean use_squash_pr_title_as_default = false;
    # The default value for a squash merge commit title:
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
    "PR_TITLE"|"COMMIT_OR_PR_TITLE" squash_merge_commit_title?;
    # The default value for a squash merge commit message:
    # 
    # - `PR_BODY` - default to the pull request's body.
    # - `COMMIT_MESSAGES` - default to the branch's commit messages.
    # - `BLANK` - default to a blank commit message.
    "PR_BODY"|"COMMIT_MESSAGES"|"BLANK" squash_merge_commit_message?;
    # The default value for a merge commit title.
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
    "PR_TITLE"|"MERGE_MESSAGE" merge_commit_title?;
    # The default value for a merge commit message.
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `PR_BODY` - default to the pull request's body.
    # - `BLANK` - default to a blank commit message.
    "PR_BODY"|"PR_TITLE"|"BLANK" merge_commit_message?;
    # Whether to allow merge commits for pull requests.
    boolean allow_merge_commit = true;
    # Whether to allow forking this repo
    boolean allow_forking?;
    # Whether to require contributors to sign off on web-based commits
    boolean web_commit_signoff_required = false;
    int subscribers_count?;
    int network_count?;
    int open_issues;
    int watchers;
    string master_branch?;
    string starred_at?;
    # Whether anonymous git access is enabled for this repository
    boolean anonymous_access_enabled?;
};

# GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
public type NullableIntegration record {
    # Unique identifier of the GitHub app
    int id;
    # The slug name of the GitHub app
    string slug?;
    string node_id;
    # A GitHub user.
    NullableSimpleUser? owner;
    # The name of the GitHub app
    string name;
    string? description;
    string external_url;
    string html_url;
    string created_at;
    string updated_at;
    # The set of permissions for the GitHub app
    Integration_permissions permissions;
    # The list of events for the GitHub app
    string[] events;
    # The number of installations associated with the GitHub app
    int installations_count?;
    string client_id?;
    string client_secret?;
    string? webhook_secret?;
    string pem?;
};

public type DeploymentBranchPolicyNamePatternWithType record {
    # The name pattern that branches or tags must match in order to deploy to the environment.
    # 
    # Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*/*`.
    # For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).
    string name;
    # Whether this rule targets a branch or tag
    "branch"|"tag" 'type?;
};

public type Restrictions_apps_body record {
    # The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
    string[] apps;
}|string[];

public type Pullrequestsimple__links record {
    Link comments;
    Link commits;
    Link statuses;
    Link html;
    Link issue;
    Link review_comments;
    Link review_comment;
    Link self;
};

public type Pullrequestsimple_head record {
    string label;
    string ref;
    # A git repository
    Repository repo;
    string sha;
    # A GitHub user.
    NullableSimpleUser? user;
};

public type Team_parent record {
    # Description of the team
    string? description;
    string html_url;
    # Unique identifier of the team
    int id;
    string members_url;
    # Name of the team
    string name;
    string node_id;
    # Permission that the team will have for its repositories
    string permission;
    "open"|"closed"|"secret" privacy;
    # Whether team members will receive notifications when their team is @mentioned
    "notifications_enabled"|"notifications_disabled" notification_setting;
    string repositories_url;
    string slug;
    # URL for the team
    string url;
};

# Tag protection
public type TagProtection record {
    int id?;
    string created_at?;
    string updated_at?;
    boolean enabled?;
    string pattern;
};

public type Traffic record {
    string timestamp;
    int uniques;
    int count;
};

public type Repository_permissions record {
    boolean admin;
    boolean maintain?;
    boolean pull;
    boolean push;
    boolean triage?;
};

# Response
public type RuleSuites Rulesuites_inner[];

# Repository Collaborator Permission
public type RepositoryCollaboratorPermission record {
    string permission;
    string role_name;
    # Collaborator
    NullableCollaborator? user;
};

public type Template_repo_generate_body record {
    # The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.
    string owner?;
    # The name of the new repository.
    string name;
    # A short description of the new repository.
    string description?;
    # Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.
    boolean include_all_branches = false;
    # Either `true` to create a new private repository or `false` to create a new public one.
    boolean 'private = false;
};

# The set of permissions for the GitHub app
public type App_3_permissions record {
    "read"|"write" actions?;
    "read"|"write" administration?;
    "read"|"write" checks?;
    "read"|"write" content_references?;
    "read"|"write" contents?;
    "read"|"write" deployments?;
    "read"|"write" discussions?;
    "read"|"write" emails?;
    "read"|"write" environments?;
    "read"|"write" issues?;
    "read"|"write" keys?;
    "read"|"write" members?;
    "read"|"write" metadata?;
    "read"|"write" organization_administration?;
    "read"|"write" organization_hooks?;
    "read"|"write" organization_packages?;
    "read"|"write" organization_plan?;
    "read"|"write" organization_projects?;
    "read"|"write" organization_secrets?;
    "read"|"write" organization_self_hosted_runners?;
    "read"|"write" organization_user_blocking?;
    "read"|"write" packages?;
    "read"|"write" pages?;
    "read"|"write" pull_requests?;
    "read"|"write" repository_hooks?;
    "read"|"write" repository_projects?;
    "read"|"write" secret_scanning_alerts?;
    "read"|"write" secrets?;
    "read"|"write" security_events?;
    "read"|"write" security_scanning_alert?;
    "read"|"write" single_file?;
    "read"|"write" statuses?;
    "read"|"write" team_discussions?;
    "read"|"write" vulnerability_alerts?;
    "read"|"write" workflows?;
};

# A repository rule.
public type RepositoryRule RepositoryRuleCreation|RepositoryRuleUpdate|RepositoryRuleDeletion|RepositoryRuleRequiredLinearHistory|RepositoryRuleRequiredDeployments|RepositoryRuleRequiredSignatures|RepositoryRulePullRequest|RepositoryRuleRequiredStatusChecks|RepositoryRuleNonFastForward|RepositoryRuleCommitMessagePattern|RepositoryRuleCommitAuthorEmailPattern|RepositoryRuleCommitterEmailPattern|RepositoryRuleBranchNamePattern|RepositoryRuleTagNamePattern;

public type Deployment_id_statuses_body record {
    # The state of the status. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.
    "error"|"failure"|"inactive"|"in_progress"|"queued"|"pending"|"success" state;
    # The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.
    string target_url = "";
    # The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
    string log_url = "";
    # A short description of the status. The maximum description length is 140 characters.
    string description = "";
    # Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. If not defined, the environment of the previous status on the deployment will be used, if it exists. Otherwise, the environment of the deployment will be used.
    string environment?;
    # Sets the URL for accessing your environment. Default: `""`
    string environment_url = "";
    # Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`
    boolean auto_inactive?;
};

public type Filecommit_content__links record {
    string self?;
    string git?;
    string html?;
};

# Parameters to be used for the commit_message_pattern rule
public type RepositoryRuleCommitMessagePattern record {
    "commit_message_pattern" 'type;
    Repositoryrulecommitmessagepattern_parameters parameters?;
};

# The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).
public type WaitTimer int;

public type Repositoryrulepullrequest_parameters record {
    # New, reviewable commits pushed will dismiss previous pull request review approvals.
    boolean dismiss_stale_reviews_on_push;
    # Require an approving review in pull requests that modify files that have a designated code owner.
    boolean require_code_owner_review;
    # Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
    boolean require_last_push_approval;
    # The number of approving reviews that are required before a pull request can be merged.
    @constraint:Int {minValue: 0, maxValue: 10}
    int required_approving_review_count;
    # All conversations on code must be resolved before a pull request can be merged.
    boolean required_review_thread_resolution;
};

public type Repositoryrulesetconditionsrepositoryidtarget_repository_id record {
    # The repository IDs that the ruleset applies to. One of these IDs must match for the condition to pass.
    int[] repository_ids?;
};

public type Contenttree__links record {
    string? git;
    string? html;
    string self;
};

public type Repo_hooks_body record {|
    # Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.
    string name?;
    # Key/value pairs to provide settings for this webhook.
    Reposownerrepohooks_config config?;
    # Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
    string[] events?;
    # Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
    boolean active?;
|};

# A set of rules to apply when specified conditions are met.
public type RepositoryRuleset record {
    # The ID of the ruleset
    int id;
    # The name of the ruleset
    string name;
    # The target of the ruleset
    "branch"|"tag" target?;
    # The type of the source of the ruleset
    "Repository"|"Organization" source_type?;
    # The name of the source
    string 'source;
    # The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
    RepositoryRuleEnforcement enforcement;
    # The actors that can bypass the rules in this ruleset
    RepositoryRulesetBypassActor[] bypass_actors?;
    # The bypass type of the user making the API request for this ruleset. This field is only returned when
    # querying the repository-level endpoint.
    "always"|"pull_requests_only"|"never" current_user_can_bypass?;
    string node_id?;
    Repositoryruleset__links _links?;
    RepositoryRulesetConditions|OrgRulesetConditions conditions?;
    RepositoryRule[] rules?;
    string created_at?;
    string updated_at?;
};

public type Pageshealthcheck_domain record {
    string host?;
    string uri?;
    string nameservers?;
    boolean dns_resolves?;
    boolean? is_proxied?;
    boolean? is_cloudflare_ip?;
    boolean? is_fastly_ip?;
    boolean? is_old_ip_address?;
    boolean? is_a_record?;
    boolean? has_cname_record?;
    boolean? has_mx_records_present?;
    boolean is_valid_domain?;
    boolean is_apex_domain?;
    boolean? should_be_a_record?;
    boolean? is_cname_to_github_user_domain?;
    boolean? is_cname_to_pages_dot_github_dot_com?;
    boolean? is_cname_to_fastly?;
    boolean? is_pointed_to_github_pages_ip?;
    boolean? is_non_github_pages_ip_present?;
    boolean is_pages_domain?;
    boolean? is_served_by_pages?;
    boolean is_valid?;
    string? reason?;
    boolean responds_to_https?;
    boolean enforces_https?;
    string? https_error?;
    boolean? is_https_eligible?;
    string? caa_error?;
};

# Check Automated Security Fixes
public type CheckAutomatedSecurityFixes record {
    # Whether automated security fixes are enabled for the repository.
    boolean enabled;
    # Whether automated security fixes are paused for the repository.
    boolean paused;
};

# Clone Traffic
public type CloneTraffic record {
    int count;
    int uniques;
    Traffic[] clones;
};

# GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
public type App_3 record {
    string? created_at;
    string? description;
    # The list of events for the GitHub app
    ("branch_protection_rule"|"check_run"|"check_suite"|"code_scanning_alert"|"commit_comment"|"content_reference"|"create"|"delete"|"deployment"|"deployment_review"|"deployment_status"|"deploy_key"|"discussion"|"discussion_comment"|"fork"|"gollum"|"issues"|"issue_comment"|"label"|"member"|"membership"|"milestone"|"organization"|"org_block"|"page_build"|"project"|"project_card"|"project_column"|"public"|"pull_request"|"pull_request_review"|"pull_request_review_comment"|"push"|"registry_package"|"release"|"repository"|"repository_dispatch"|"secret_scanning_alert"|"star"|"status"|"team"|"team_add"|"watch"|"workflow_dispatch"|"workflow_run"|"workflow_job"|"pull_request_review_thread"|"merge_queue_entry"|"secret_scanning_alert_location"|"merge_group")[] events?;
    string? external_url;
    string html_url;
    # Unique identifier of the GitHub app
    int? id;
    # The name of the GitHub app
    string name;
    string node_id;
    User? owner;
    # The set of permissions for the GitHub app
    App_3_permissions permissions?;
    # The slug name of the GitHub app
    string slug?;
    string? updated_at;
};

# Code Of Conduct
public type CodeOfConduct record {
    string 'key;
    string name;
    string url;
    string body?;
    string? html_url;
};

public type Repositoryrulecommitmessagepattern_parameters record {
    # How this rule will appear to users.
    string name?;
    # If true, the rule will fail if the pattern matches.
    boolean negate?;
    # The operator to use for matching.
    "starts_with"|"ends_with"|"contains"|"regex" operator;
    # The pattern to match with.
    string pattern;
};

# Contributor
public type Contributor record {
    string login?;
    int id?;
    string node_id?;
    string avatar_url?;
    string? gravatar_id?;
    string url?;
    string html_url?;
    string followers_url?;
    string following_url?;
    string gists_url?;
    string starred_url?;
    string subscriptions_url?;
    string organizations_url?;
    string repos_url?;
    string events_url?;
    string received_events_url?;
    string 'type;
    boolean site_admin?;
    int contributions;
    string email?;
    string name?;
};

# Results of a successful merge upstream request
public type MergedUpstream record {
    string message?;
    "merge"|"fast-forward"|"none" merge_type?;
    string base_branch?;
};

public type Releases_release_id_body record {
    # The name of the tag.
    string tag_name?;
    # Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.
    string target_commitish?;
    # The name of the release.
    string name?;
    # Text describing the contents of the tag.
    string body?;
    # `true` makes the release a draft, and `false` publishes the release.
    boolean draft?;
    # `true` to identify the release as a prerelease, `false` to identify the release as a full release.
    boolean prerelease?;
    # Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
    "true"|"false"|"legacy" make_latest?;
    # If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
    string discussion_category_name?;
};

# Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
public type Protectedbranch_allow_fork_syncing record {|
    boolean enabled?;
|};

# The status of auto merging a pull request.
public type AutoMerge record {
    # A GitHub user.
    SimpleUser enabled_by;
    # The merge method to use.
    "merge"|"squash"|"rebase" merge_method;
    # Title for the merge commit message.
    string commit_title;
    # Commit message for the merge commit.
    string commit_message;
};

public type Comments_comment_id_body_1 record {
    # The contents of the comment
    string body;
};

public type Releases_generatenotes_body record {
    # The tag name for the release. This can be an existing tag or a new one.
    string tag_name;
    # Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists.
    string target_commitish?;
    # The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release.
    string previous_tag_name?;
    # Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used.
    string configuration_file_path?;
};

public type Org_repos_body record {
    # The name of the repository.
    string name;
    # A short description of the repository.
    string description?;
    # A URL with more information about the repository.
    string homepage?;
    # Whether the repository is private.
    boolean 'private = false;
    # The visibility of the repository.
    "public"|"private" visibility?;
    # Either `true` to enable issues for this repository or `false` to disable them.
    boolean has_issues = true;
    # Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
    boolean has_projects = true;
    # Either `true` to enable the wiki for this repository or `false` to disable it.
    boolean has_wiki = true;
    # Whether downloads are enabled.
    boolean has_downloads = true;
    # Either `true` to make this repo available as a template repository or `false` to prevent it.
    boolean is_template = false;
    # The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
    int team_id?;
    # Pass `true` to create an initial commit with empty README.
    boolean auto_init = false;
    # Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell".
    string gitignore_template?;
    # Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0".
    string license_template?;
    # Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
    boolean allow_squash_merge = true;
    # Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
    boolean allow_merge_commit = true;
    # Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
    boolean allow_rebase_merge = true;
    # Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
    boolean allow_auto_merge = false;
    # Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. **The authenticated user must be an organization owner to set this property to `true`.**
    boolean delete_branch_on_merge = false;
    # Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
    boolean use_squash_pr_title_as_default = false;
    # The default value for a squash merge commit title:
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
    "PR_TITLE"|"COMMIT_OR_PR_TITLE" squash_merge_commit_title?;
    # The default value for a squash merge commit message:
    # 
    # - `PR_BODY` - default to the pull request's body.
    # - `COMMIT_MESSAGES` - default to the branch's commit messages.
    # - `BLANK` - default to a blank commit message.
    "PR_BODY"|"COMMIT_MESSAGES"|"BLANK" squash_merge_commit_message?;
    # The default value for a merge commit title.
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
    "PR_TITLE"|"MERGE_MESSAGE" merge_commit_title?;
    # The default value for a merge commit message.
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `PR_BODY` - default to the pull request's body.
    # - `BLANK` - default to a blank commit message.
    "PR_BODY"|"PR_TITLE"|"BLANK" merge_commit_message?;
};

# Branch With Protection
public type BranchWithProtection record {
    string name;
    Commit 'commit;
    Branchwithprotection__links _links;
    boolean protected;
    # Branch Protection
    BranchProtection protection;
    string protection_url;
    string pattern?;
    int required_approving_review_count?;
};

# Collaborator
public type Collaborator record {
    string login;
    int id;
    string? email?;
    string? name?;
    string node_id;
    string avatar_url;
    string? gravatar_id;
    string url;
    string html_url;
    string followers_url;
    string following_url;
    string gists_url;
    string starred_url;
    string subscriptions_url;
    string organizations_url;
    string repos_url;
    string events_url;
    string received_events_url;
    string 'type;
    boolean site_admin;
    Collaborator_permissions permissions?;
    string role_name;
};

# User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
public type RepositoryRuleRulesetInfo record {
    # The type of source for the ruleset that includes this rule.
    "Repository"|"Organization" ruleset_source_type?;
    # The name of the source of the ruleset that includes this rule.
    string ruleset_source?;
    # The ID of the ruleset that includes this rule.
    int ruleset_id?;
};

public type Filecommit_commit_tree record {
    string url?;
    string sha?;
};

# Repository invitations let you manage who you collaborate with.
public type RepositoryInvitation record {
    # Unique identifier of the repository invitation.
    int id;
    # Minimal Repository
    MinimalRepository repository;
    # A GitHub user.
    NullableSimpleUser? invitee;
    # A GitHub user.
    NullableSimpleUser? inviter;
    # The permission associated with the invitation.
    "read"|"write"|"admin"|"triage"|"maintain" permissions;
    string created_at;
    # Whether or not the invitation has expired
    boolean expired?;
    # URL for the repository invitation
    string url;
    string html_url;
    string node_id;
};

public type Hookdelivery_request record {
    # The request headers sent with the webhook delivery.
    record {}? headers;
    # The webhook payload.
    record {}? payload;
};

# Branch Restriction Policy
public type BranchRestrictionPolicy record {
    string url;
    string users_url;
    string teams_url;
    string apps_url;
    Repository_template_repository_owner[] users;
    Branchrestrictionpolicy_teams[] teams;
    Branchrestrictionpolicy_apps[] apps;
};

public type Repo_pages_body anydata|anydata|anydata|anydata|anydata;

public type Fullrepository_permissions record {
    boolean admin;
    boolean maintain?;
    boolean push;
    boolean triage?;
    boolean pull;
};

# Pull Request Simple
public type PullRequestSimple record {
    string url;
    int id;
    string node_id;
    string html_url;
    string diff_url;
    string patch_url;
    string issue_url;
    string commits_url;
    string review_comments_url;
    string review_comment_url;
    string comments_url;
    string statuses_url;
    int number;
    string state;
    boolean locked;
    string title;
    # A GitHub user.
    NullableSimpleUser? user;
    string? body;
    Pullrequestsimple_labels[] labels;
    # A collection of related issues and pull requests.
    NullableMilestone? milestone;
    string? active_lock_reason?;
    string created_at;
    string updated_at;
    string? closed_at;
    string? merged_at;
    string? merge_commit_sha;
    # A GitHub user.
    NullableSimpleUser? assignee;
    SimpleUser[]? assignees?;
    SimpleUser[]? requested_reviewers?;
    Team[]? requested_teams?;
    Pullrequestsimple_head head;
    Pullrequestsimple_head base;
    Pullrequestsimple__links _links;
    # How the author is associated with the repository.
    AuthorAssociation author_association;
    # The status of auto merging a pull request.
    AutoMerge? auto_merge;
    # Indicates whether or not the pull request is a draft.
    boolean draft?;
};

# Specify which security and analysis features to enable or disable for the repository.
# 
# To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
# 
# For example, to enable GitHub Advanced Security, use this data in the body of the `PATCH` request:
# `{ "security_and_analysis": {"advanced_security": { "status": "enabled" } } }`.
# 
# You can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.
public type Reposownerrepo_security_and_analysis record {
    # Use the `status` property to enable or disable GitHub Advanced Security for this repository. For more information, see "[About GitHub Advanced Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security)."
    Reposownerrepo_security_and_analysis_advanced_security advanced_security?;
    # Use the `status` property to enable or disable secret scanning for this repository. For more information, see "[About secret scanning](/code-security/secret-security/about-secret-scanning)."
    Reposownerrepo_security_and_analysis_secret_scanning secret_scanning?;
    # Use the `status` property to enable or disable secret scanning push protection for this repository. For more information, see "[Protecting pushes with secret scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning)."
    Reposownerrepo_security_and_analysis_secret_scanning_push_protection secret_scanning_push_protection?;
};

public type Pageshealthcheck_alt_domain record {
    string host?;
    string uri?;
    string nameservers?;
    boolean dns_resolves?;
    boolean? is_proxied?;
    boolean? is_cloudflare_ip?;
    boolean? is_fastly_ip?;
    boolean? is_old_ip_address?;
    boolean? is_a_record?;
    boolean? has_cname_record?;
    boolean? has_mx_records_present?;
    boolean is_valid_domain?;
    boolean is_apex_domain?;
    boolean? should_be_a_record?;
    boolean? is_cname_to_github_user_domain?;
    boolean? is_cname_to_pages_dot_github_dot_com?;
    boolean? is_cname_to_fastly?;
    boolean? is_pointed_to_github_pages_ip?;
    boolean? is_non_github_pages_ip_present?;
    boolean is_pages_domain?;
    boolean? is_served_by_pages?;
    boolean is_valid?;
    string? reason?;
    boolean responds_to_https?;
    boolean enforces_https?;
    string? https_error?;
    boolean? is_https_eligible?;
    string? caa_error?;
};

public type Filecommit_commit record {
    string sha?;
    string node_id?;
    string url?;
    string html_url?;
    Filecommit_commit_author author?;
    Filecommit_commit_author committer?;
    string message?;
    Filecommit_commit_tree tree?;
    Filecommit_commit_parents[] parents?;
    Filecommit_commit_verification verification?;
};

public type User_repos_body record {
    # The name of the repository.
    string name;
    # A short description of the repository.
    string description?;
    # A URL with more information about the repository.
    string homepage?;
    # Whether the repository is private.
    boolean 'private = false;
    # Whether issues are enabled.
    boolean has_issues = true;
    # Whether projects are enabled.
    boolean has_projects = true;
    # Whether the wiki is enabled.
    boolean has_wiki = true;
    # Whether discussions are enabled.
    boolean has_discussions = false;
    # The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
    int team_id?;
    # Whether the repository is initialized with a minimal README.
    boolean auto_init = false;
    # The desired language or platform to apply to the .gitignore.
    string gitignore_template?;
    # The license keyword of the open source license for this repository.
    string license_template?;
    # Whether to allow squash merges for pull requests.
    boolean allow_squash_merge = true;
    # Whether to allow merge commits for pull requests.
    boolean allow_merge_commit = true;
    # Whether to allow rebase merges for pull requests.
    boolean allow_rebase_merge = true;
    # Whether to allow Auto-merge to be used on pull requests.
    boolean allow_auto_merge = false;
    # Whether to delete head branches when pull requests are merged
    boolean delete_branch_on_merge = false;
    # The default value for a squash merge commit title:
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
    "PR_TITLE"|"COMMIT_OR_PR_TITLE" squash_merge_commit_title?;
    # The default value for a squash merge commit message:
    # 
    # - `PR_BODY` - default to the pull request's body.
    # - `COMMIT_MESSAGES` - default to the branch's commit messages.
    # - `BLANK` - default to a blank commit message.
    "PR_BODY"|"COMMIT_MESSAGES"|"BLANK" squash_merge_commit_message?;
    # The default value for a merge commit title.
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
    "PR_TITLE"|"MERGE_MESSAGE" merge_commit_title?;
    # The default value for a merge commit message.
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `PR_BODY` - default to the pull request's body.
    # - `BLANK` - default to a blank commit message.
    "PR_BODY"|"PR_TITLE"|"BLANK" merge_commit_message?;
    # Whether downloads are enabled.
    boolean has_downloads = true;
    # Whether this repository acts as a template that can be used to generate new repositories.
    boolean is_template = false;
};

public type Restrictions_users_body_2 record {
    # The username for users
    string[] users;
}|string[];

public type HookResponse record {
    int? code;
    string? status;
    string? message;
};

public type Restrictions_users_body_1 record {
    # The username for users
    string[] users;
}|string[];

# Delivery made by a webhook, without request and response information.
public type HookDeliveryItem record {
    # Unique identifier of the webhook delivery.
    int id;
    # Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
    string guid;
    # Time when the webhook delivery occurred.
    string delivered_at;
    # Whether the webhook delivery is a redelivery.
    boolean redelivery;
    # Time spent delivering.
    decimal duration;
    # Describes the response returned after attempting the delivery.
    string status;
    # Status code received when delivery was made.
    int status_code;
    # The event that triggered the delivery.
    string event;
    # The type of activity for the event that triggered the delivery.
    string? action;
    # The id of the GitHub App installation associated with this event.
    int? installation_id;
    # The id of the repository associated with this event.
    int? repository_id;
};

public type Repositoryrulesetconditionsrepositorynametarget_repository_name record {
    # Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.
    string[] include?;
    # Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
    string[] exclude?;
    # Whether renaming of target repositories is prevented.
    boolean protected?;
};

public type Rulesets_ruleset_id_body record {
    # The name of the ruleset.
    string name?;
    # The target of the ruleset.
    "branch"|"tag" target?;
    # The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
    RepositoryRuleEnforcement enforcement?;
    # The actors that can bypass the rules in this ruleset
    RepositoryRulesetBypassActor[] bypass_actors?;
    # Conditions for an organization ruleset. The conditions object should contain both `repository_name` and `ref_name` properties or both `repository_id` and `ref_name` properties.
    OrgRulesetConditions conditions?;
    # An array of rules within the ruleset.
    RepositoryRule[] rules?;
};

public type Repository_template_repository_owner record {
    string login?;
    int id?;
    string node_id?;
    string avatar_url?;
    string gravatar_id?;
    string url?;
    string html_url?;
    string followers_url?;
    string following_url?;
    string gists_url?;
    string starred_url?;
    string subscriptions_url?;
    string organizations_url?;
    string repos_url?;
    string events_url?;
    string received_events_url?;
    string 'type?;
    boolean site_admin?;
};

# Branch Protection
public type BranchProtection record {
    string url?;
    boolean enabled?;
    # Protected Branch Required Status Check
    ProtectedBranchRequiredStatusCheck required_status_checks?;
    # Protected Branch Admin Enforced
    ProtectedBranchAdminEnforced enforce_admins?;
    # Protected Branch Pull Request Review
    ProtectedBranchPullRequestReview required_pull_request_reviews?;
    # Branch Restriction Policy
    BranchRestrictionPolicy restrictions?;
    Branchprotection_required_linear_history required_linear_history?;
    Branchprotection_required_linear_history allow_force_pushes?;
    Branchprotection_required_linear_history allow_deletions?;
    Branchprotection_required_linear_history block_creations?;
    Branchprotection_required_linear_history required_conversation_resolution?;
    string name?;
    string protection_url?;
    Branchprotection_required_signatures required_signatures?;
    # Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
    Branchprotection_lock_branch lock_branch?;
    # Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
    Branchprotection_allow_fork_syncing allow_fork_syncing?;
};

# Content Tree
public type ContentTree record {
    string 'type;
    int size;
    string name;
    string path;
    string sha;
    string url;
    string? git_url;
    string? html_url;
    string? download_url;
    Contenttree_entries[] entries?;
    Contenttree__links _links;
};

# Commit Activity
public type CommitActivity record {
    int[] days;
    int total;
    int week;
};

# The set of permissions for the GitHub app
public type Integration_permissions record {|
    string issues?;
    string checks?;
    string metadata?;
    string contents?;
    string deployments?;
    string...;
|};

# The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.
public type Release record {
    ReleaseAsset[] assets;
    string assets_url;
    User? author;
    string? body;
    string? created_at;
    string discussion_url?;
    # Whether the release is a draft or published
    boolean draft;
    string html_url;
    int id;
    string? name;
    string node_id;
    # Whether the release is identified as a prerelease or a full release.
    boolean prerelease;
    string? published_at;
    Reactions reactions?;
    # The name of the tag.
    string tag_name;
    string? tarball_url;
    # Specifies the commitish value that determines where the Git tag is created from.
    string target_commitish;
    string upload_url;
    string url;
    string? zipball_url;
};

# The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
public type RepositoryRuleEnforcement "disabled"|"active"|"evaluate";

# An autolink reference.
public type Autolink record {
    int id;
    # The prefix of a key that is linkified.
    string key_prefix;
    # A template for the target URL that is generated if a key was found.
    string url_template;
    # Whether this autolink reference matches alphanumeric characters. If false, this autolink reference only matches numeric characters.
    boolean is_alphanumeric;
};

public type Required_status_checks_contexts_body record {
    # The name of the status checks
    string[] contexts;
}|string[];

public type NullableCommunityHealthFile record {
    string url;
    string html_url;
};

public type Communityprofile_files record {
    # Code of Conduct Simple
    NullableCodeOfConductSimple? code_of_conduct;
    NullableCommunityHealthFile? code_of_conduct_file;
    # License Simple
    NullableLicenseSimple? license;
    NullableCommunityHealthFile? contributing;
    NullableCommunityHealthFile? readme;
    NullableCommunityHealthFile? issue_template;
    NullableCommunityHealthFile? pull_request_template;
};

# Key/value pairs to provide settings for this webhook.
public type Reposownerrepohookshook_id_config record {
    # The URL to which the payloads will be delivered.
    WebhookConfigUrl url;
    # The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
    WebhookConfigContentType content_type?;
    # If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
    WebhookConfigSecret secret?;
    WebhookConfigInsecureSsl insecure_ssl?;
    string address?;
    string room?;
};

# An actor that can bypass rules in a ruleset
public type RepositoryRulesetBypassActor record {
    # The ID of the actor that can bypass a ruleset. If `actor_type` is `OrganizationAdmin`, this should be `1`.
    int actor_id;
    # The type of actor that can bypass a ruleset
    "RepositoryRole"|"Team"|"Integration"|"OrganizationAdmin" actor_type;
    # When the specified actor can bypass the ruleset. `pull_request` means that an actor can only bypass rules on pull requests.
    "always"|"pull_request" bypass_mode;
};

public type Hook_config record {
    string email?;
    string password?;
    string room?;
    string subdomain?;
    # The URL to which the payloads will be delivered.
    WebhookConfigUrl url?;
    WebhookConfigInsecureSsl insecure_ssl?;
    # The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
    WebhookConfigContentType content_type?;
    string digest?;
    # If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
    WebhookConfigSecret secret?;
    string token?;
};

# Diff Entry
public type DiffEntry record {
    string sha;
    string filename;
    "added"|"removed"|"modified"|"renamed"|"copied"|"changed"|"unchanged" status;
    int additions;
    int deletions;
    int changes;
    string blob_url;
    string raw_url;
    string contents_url;
    string patch?;
    string previous_filename?;
};

public type Repo_topics_body record {
    # An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters.
    string[] names;
};

# Parameters to be used for the branch_name_pattern rule
public type RepositoryRuleBranchNamePattern record {
    "branch_name_pattern" 'type;
    Repositoryrulecommitmessagepattern_parameters parameters?;
};

public type Link record {
    string href;
};

public type Branchrestrictionpolicy_teams record {
    int id?;
    string node_id?;
    string url?;
    string html_url?;
    string name?;
    string slug?;
    string? description?;
    string privacy?;
    string notification_setting?;
    string permission?;
    string members_url?;
    string repositories_url?;
    string? parent?;
};

# The type of reviewer.
public type DeploymentReviewerType "User"|"Team";

# Branch Short
public type BranchShort record {
    string name;
    Branchshort_commit 'commit;
    boolean protected;
};

# Use the `status` property to enable or disable secret scanning for this repository. For more information, see "[About secret scanning](/code-security/secret-security/about-secret-scanning)."
public type Reposownerrepo_security_and_analysis_secret_scanning record {
    # Can be `enabled` or `disabled`.
    string status?;
};

public type Contributoractivity_weeks record {
    int w?;
    int a?;
    int d?;
    int c?;
};

# A git repository
public type Repository record {
    # Whether to allow auto-merge for pull requests.
    boolean allow_auto_merge = false;
    # Whether to allow private forks
    boolean allow_forking?;
    # Whether to allow merge commits for pull requests.
    boolean allow_merge_commit = true;
    # Whether to allow rebase merges for pull requests.
    boolean allow_rebase_merge = true;
    # Whether to allow squash merges for pull requests.
    boolean allow_squash_merge = true;
    boolean allow_update_branch?;
    string archive_url;
    # Whether the repository is archived.
    boolean archived;
    string assignees_url;
    string blobs_url;
    string branches_url;
    string clone_url;
    string collaborators_url;
    string comments_url;
    string commits_url;
    string compare_url;
    string contents_url;
    string contributors_url;
    int|string created_at;
    # The default branch of the repository.
    string default_branch;
    # Whether to delete head branches when pull requests are merged
    boolean delete_branch_on_merge = false;
    string deployments_url;
    string? description;
    # Returns whether or not this repository is disabled.
    boolean disabled?;
    string downloads_url;
    string events_url;
    boolean 'fork;
    int forks;
    int forks_count;
    string forks_url;
    string full_name;
    string git_commits_url;
    string git_refs_url;
    string git_tags_url;
    string git_url;
    # Whether the repository has discussions enabled.
    boolean has_discussions?;
    # Whether downloads are enabled.
    boolean has_downloads;
    # Whether issues are enabled.
    boolean has_issues;
    boolean has_pages;
    # Whether projects are enabled.
    boolean has_projects;
    # Whether the wiki is enabled.
    boolean has_wiki;
    string? homepage;
    string hooks_url;
    string html_url;
    # Unique identifier of the repository
    int id;
    boolean is_template?;
    string issue_comment_url;
    string issue_events_url;
    string issues_url;
    string keys_url;
    string labels_url;
    string? language;
    string languages_url;
    License? license;
    string master_branch?;
    string merges_url;
    string milestones_url;
    string? mirror_url;
    # The name of the repository.
    string name;
    string node_id;
    string notifications_url;
    int open_issues;
    int open_issues_count;
    string organization?;
    User? owner;
    Repository_permissions permissions?;
    # Whether the repository is private or public.
    boolean 'private;
    boolean 'public?;
    string pulls_url;
    int|string? pushed_at;
    string releases_url;
    string? role_name?;
    int size;
    string ssh_url;
    int stargazers?;
    int stargazers_count;
    string stargazers_url;
    string statuses_url;
    string subscribers_url;
    string subscription_url;
    string svn_url;
    string tags_url;
    string teams_url;
    string[] topics;
    string trees_url;
    string updated_at;
    string url;
    "public"|"private"|"internal" visibility;
    int watchers;
    int watchers_count;
    # Whether to require commit signoff.
    boolean web_commit_signoff_required?;
};

# Minimal Repository
public type MinimalRepository record {
    int id;
    string node_id;
    string name;
    string full_name;
    # A GitHub user.
    SimpleUser owner;
    boolean 'private;
    string html_url;
    string? description;
    boolean 'fork;
    string url;
    string archive_url;
    string assignees_url;
    string blobs_url;
    string branches_url;
    string collaborators_url;
    string comments_url;
    string commits_url;
    string compare_url;
    string contents_url;
    string contributors_url;
    string deployments_url;
    string downloads_url;
    string events_url;
    string forks_url;
    string git_commits_url;
    string git_refs_url;
    string git_tags_url;
    string git_url?;
    string issue_comment_url;
    string issue_events_url;
    string issues_url;
    string keys_url;
    string labels_url;
    string languages_url;
    string merges_url;
    string milestones_url;
    string notifications_url;
    string pulls_url;
    string releases_url;
    string ssh_url?;
    string stargazers_url;
    string statuses_url;
    string subscribers_url;
    string subscription_url;
    string tags_url;
    string teams_url;
    string trees_url;
    string clone_url?;
    string? mirror_url?;
    string hooks_url;
    string svn_url?;
    string? homepage?;
    string? language?;
    int forks_count?;
    int stargazers_count?;
    int watchers_count?;
    # The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
    int size?;
    string default_branch?;
    int open_issues_count?;
    boolean is_template?;
    string[] topics?;
    boolean has_issues?;
    boolean has_projects?;
    boolean has_wiki?;
    boolean has_pages?;
    boolean has_downloads?;
    boolean has_discussions?;
    boolean archived?;
    boolean disabled?;
    string visibility?;
    string? pushed_at?;
    string? created_at?;
    string? updated_at?;
    Repository_template_repository_permissions permissions?;
    string role_name?;
    string temp_clone_token?;
    boolean delete_branch_on_merge?;
    int subscribers_count?;
    int network_count?;
    # Code Of Conduct
    CodeOfConduct code_of_conduct?;
    Minimalrepository_license? license?;
    int forks?;
    int open_issues?;
    int watchers?;
    boolean allow_forking?;
    boolean web_commit_signoff_required?;
    SecurityAndAnalysis? security_and_analysis?;
};

public type Rulesets_ruleset_id_body_1 record {
    # The name of the ruleset.
    string name?;
    # The target of the ruleset.
    "branch"|"tag" target?;
    # The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
    RepositoryRuleEnforcement enforcement?;
    # The actors that can bypass the rules in this ruleset
    RepositoryRulesetBypassActor[] bypass_actors?;
    # Parameters for a repository ruleset ref name condition
    RepositoryRulesetConditions conditions?;
    # An array of rules within the ruleset.
    RepositoryRule[] rules?;
};

# The [deployment](https://docs.github.com/rest/deployments/deployments#list-deployments).
public type Deployment record {
    string created_at;
    User? creator;
    string? description;
    string environment;
    int id;
    string node_id;
    string original_environment;
    record {}|string payload;
    # GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    App_3? performed_via_github_app?;
    boolean production_environment?;
    string ref;
    string repository_url;
    string sha;
    string statuses_url;
    string task;
    boolean transient_environment?;
    string updated_at;
    string url;
};

public type ParticipationStats record {
    int[] all;
    int[] owner;
};

# Use the `status` property to enable or disable secret scanning push protection for this repository. For more information, see "[Protecting pushes with secret scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning)."
public type Reposownerrepo_security_and_analysis_secret_scanning_push_protection record {
    # Can be `enabled` or `disabled`.
    string status?;
};

# Parameters for a repository name condition
public type RepositoryRulesetConditionsRepositoryNameTarget record {
    Repositoryrulesetconditionsrepositorynametarget_repository_name repository_name;
};

public type Repo_autolinks_body record {
    # This prefix appended by certain characters will generate a link any time it is found in an issue, pull request, or commit.
    string key_prefix;
    # The URL must contain `<num>` for the reference number. `<num>` matches different characters depending on the value of `is_alphanumeric`.
    string url_template;
    # Whether this autolink reference matches alphanumeric characters. If true, the `<num>` parameter of the `url_template` matches alphanumeric characters `A-Z` (case insensitive), `0-9`, and `-`. If false, this autolink reference only matches numeric characters.
    boolean is_alphanumeric = true;
};

# Language
public type Language record {|
    int...;
|};

# An object without any properties.
public type EmptyObject record {|
|};

# Combined Commit Status
public type CombinedCommitStatus record {
    string state;
    SimpleCommitStatus[] statuses;
    string sha;
    int total_count;
    # Minimal Repository
    MinimalRepository repository;
    string commit_url;
    string url;
};

# Delivery made by a webhook.
public type HookDelivery record {
    # Unique identifier of the delivery.
    int id;
    # Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
    string guid;
    # Time when the delivery was delivered.
    string delivered_at;
    # Whether the delivery is a redelivery.
    boolean redelivery;
    # Time spent delivering.
    decimal duration;
    # Description of the status of the attempted delivery
    string status;
    # Status code received when delivery was made.
    int status_code;
    # The event that triggered the delivery.
    string event;
    # The type of activity for the event that triggered the delivery.
    string? action;
    # The id of the GitHub App installation associated with this event.
    int? installation_id;
    # The id of the repository associated with this event.
    int? repository_id;
    # The URL target of the delivery.
    string url?;
    Hookdelivery_request request;
    Hookdelivery_response response;
};

public type Restrictions_apps_body_1 record {
    # The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
    string[] apps;
}|string[];

public type Restrictions_apps_body_2 record {
    # The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
    string[] apps;
}|string[];

# A GitHub user.
public type NullableSimpleUser record {
    string? name?;
    string? email?;
    string login;
    int id;
    string node_id;
    string avatar_url;
    string? gravatar_id;
    string url;
    string html_url;
    string followers_url;
    string following_url;
    string gists_url;
    string starred_url;
    string subscriptions_url;
    string organizations_url;
    string repos_url;
    string events_url;
    string received_events_url;
    string 'type;
    boolean site_admin;
    string starred_at?;
};

public type DeploymentBranchPolicyNamePattern record {
    # The name pattern that branches must match in order to deploy to the environment.
    # 
    # Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*/*`.
    # For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).
    string name;
};

# Commits pushed to matching refs must have verified signatures.
public type RepositoryRuleRequiredSignatures record {
    "required_signatures" 'type;
};

public type Protectedbranch_required_linear_history record {|
    boolean enabled;
|};

public type Branchrestrictionpolicy_owner record {
    string login?;
    int id?;
    string node_id?;
    string url?;
    string repos_url?;
    string events_url?;
    string hooks_url?;
    string issues_url?;
    string members_url?;
    string public_members_url?;
    string avatar_url?;
    string description?;
    string gravatar_id?;
    string html_url?;
    string followers_url?;
    string following_url?;
    string gists_url?;
    string starred_url?;
    string subscriptions_url?;
    string organizations_url?;
    string received_events_url?;
    string 'type?;
    boolean site_admin?;
};

# The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.
public type Reposownerrepocontentspath_author record {
    # The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
    string name;
    # The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
    string email;
    string date?;
};

public type Repo_merges_body record {
    # The name of the base branch that the head will be merged into.
    string base;
    # The head to merge. This can be a branch name or a commit SHA1.
    string head;
    # Commit message to use for the merge commit. If omitted, a default message will be used.
    string commit_message?;
};

public type Branchrestrictionpolicy_apps record {
    int id?;
    string slug?;
    string node_id?;
    Branchrestrictionpolicy_owner owner?;
    string name?;
    string description?;
    string external_url?;
    string html_url?;
    string created_at?;
    string updated_at?;
    Branchrestrictionpolicy_permissions permissions?;
    string[] events?;
};

public type Inline_response_200_32 record {
    # The total number of custom deployment protection rule integrations available for this environment.
    int total_count?;
    CustomDeploymentRuleApp[] available_custom_deployment_protection_rule_integrations?;
};

public type Inline_response_200_30 record {
    # The number of deployment branch policies for the environment.
    int total_count;
    DeploymentBranchPolicy[] branch_policies;
};

public type Inline_response_200_31 record {
    # The number of enabled custom deployment protection rules for this environment
    int total_count?;
    DeploymentProtectionRule[] custom_deployment_protection_rules?;
};

# If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
public type WebhookConfigSecret string;

public type Required_status_checks_contexts_body_1 record {
    # The name of the status checks
    string[] contexts;
}|string[];

public type Required_status_checks_contexts_body_2 record {
    # The name of the status checks
    string[] contexts;
}|string[];

public type Protectedbranchpullrequestreview_dismissal_restrictions record {
    # The list of users with review dismissal access.
    SimpleUser[] users?;
    # The list of teams with review dismissal access.
    Team[] teams?;
    # The list of apps with review dismissal access.
    Integration[] apps?;
    string url?;
    string users_url?;
    string teams_url?;
};

public type Inline_response_200_29 record {
    # The number of environments in this repository
    int total_count?;
    Environment[] environments?;
};

# Content File
public type ContentFile record {
    "file" 'type;
    string encoding;
    int size;
    string name;
    string path;
    string content;
    string sha;
    string url;
    string? git_url;
    string? html_url;
    string? download_url;
    Contenttree__links _links;
    string target?;
    string submodule_git_url?;
};

public type Shortbranch_commit record {
    string sha;
    string url;
};

public type Invitations_invitation_id_body record {
    # The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.
    "read"|"write"|"maintain"|"triage"|"admin" permissions?;
};

public type Repositoryruleset__links_html record {
    # The html URL of the ruleset
    string href?;
};

public type Repo_keys_body record {
    # A name for the key.
    string title?;
    # The contents of the key.
    string 'key;
    # If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.  
    #   
    # Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/)."
    boolean read_only?;
};

public type Protectedbranch_required_pull_request_reviews record {
    string url;
    boolean dismiss_stale_reviews?;
    boolean require_code_owner_reviews?;
    int required_approving_review_count?;
    # Whether the most recent push must be approved by someone other than the person who pushed it.
    boolean require_last_push_approval = false;
    Protectedbranch_required_pull_request_reviews_dismissal_restrictions dismissal_restrictions?;
    Protectedbranch_required_pull_request_reviews_bypass_pull_request_allowances bypass_pull_request_allowances?;
};

# Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
public type RepositoryRulePullRequest record {
    "pull_request" 'type;
    Repositoryrulepullrequest_parameters parameters?;
};

# The status of a deployment.
public type DeploymentStatus record {
    string url;
    int id;
    string node_id;
    # The state of the status.
    "error"|"failure"|"inactive"|"pending"|"success"|"queued"|"in_progress" state;
    # A GitHub user.
    NullableSimpleUser? creator;
    # A short description of the status.
    @constraint:String {maxLength: 140}
    string description;
    # The environment of the deployment that the status is for.
    string environment = "";
    # Deprecated: the URL to associate with this status.
    string target_url;
    string created_at;
    string updated_at;
    string deployment_url;
    string repository_url;
    # The URL for accessing your environment.
    string environment_url = "";
    # The URL to associate with this status.
    string log_url = "";
    # GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    NullableIntegration? performed_via_github_app?;
};

# Generated name and body describing a release
public type ReleaseNotesContent record {
    # The generated name of the release
    string name;
    # The generated body describing the contents of the release supporting markdown formatting
    string body;
};

public type Inline_response_202 record {
    string message?;
};

public type Pagebuild_error record {
    string? message;
};

# Pages Health Check Status
public type PagesHealthCheck record {
    Pageshealthcheck_domain domain?;
    Pageshealthcheck_alt_domain? alt_domain?;
};

public type Minimalrepository_license record {
    string 'key?;
    string name?;
    string spdx_id?;
    string? url?;
    string node_id?;
};

public type Securityandanalysis_advanced_security record {
    "enabled"|"disabled" status?;
};

public type Rulesuites_inner record {
    # The unique identifier of the rule insight.
    int id?;
    # The number that identifies the user.
    int actor_id?;
    # The handle for the GitHub user account.
    string actor_name?;
    # The first commit sha before the push evaluation.
    string before_sha?;
    # The last commit sha in the push evaluation.
    string after_sha?;
    # The ref name that the evaluation ran on.
    string ref?;
    # The ID of the repository associated with the rule evaluation.
    int repository_id?;
    # The name of the repository without the `.git` extension.
    string repository_name?;
    string pushed_at?;
    # The result of the rule evaluations for rules with the `active` enforcement status.
    "pass"|"fail"|"bypass" result?;
    # The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`.
    "pass"|"fail" evaluation_result?;
};

# Referrer Traffic
public type ReferrerTraffic record {
    string referrer;
    int count;
    int uniques;
};

# A GitHub user.
public type SimpleUser record {
    string? name?;
    string? email?;
    string login;
    int id;
    string node_id;
    string avatar_url;
    string? gravatar_id;
    string url;
    string html_url;
    string followers_url;
    string following_url;
    string gists_url;
    string starred_url;
    string subscriptions_url;
    string organizations_url;
    string repos_url;
    string events_url;
    string received_events_url;
    string 'type;
    boolean site_admin;
    string starred_at?;
};

public type Statuses_sha_body record {
    # The state of the status.
    "error"|"failure"|"pending"|"success" state;
    # The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.  
    # For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:  
    # `http://ci.example.com/user/repo/build/sha`
    string? target_url?;
    # A short description of the status.
    string? description?;
    # A string label to differentiate this status from the status of other systems. This field is case-insensitive.
    string context = "default";
};

public type WebhookConfigInsecureSsl string|decimal;

# GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
public type Integration record {
    # Unique identifier of the GitHub app
    int id;
    # The slug name of the GitHub app
    string slug?;
    string node_id;
    # A GitHub user.
    NullableSimpleUser? owner;
    # The name of the GitHub app
    string name;
    string? description;
    string external_url;
    string html_url;
    string created_at;
    string updated_at;
    # The set of permissions for the GitHub app
    Integration_permissions permissions;
    # The list of events for the GitHub app
    string[] events;
    # The number of installations associated with the GitHub app
    int installations_count?;
    string client_id?;
    string client_secret?;
    string? webhook_secret?;
    string pem?;
};

public type Contenttree_entries record {
    string 'type;
    int size;
    string name;
    string path;
    string content?;
    string sha;
    string url;
    string? git_url;
    string? html_url;
    string? download_url;
    Contenttree__links _links;
};

# Choose which status checks must pass before branches can be merged into a branch that matches this rule. When enabled, commits must first be pushed to another branch, then merged or pushed directly to a ref that matches this rule after status checks have passed.
public type RepositoryRuleRequiredStatusChecks record {
    "required_status_checks" 'type;
    Repositoryrulerequiredstatuschecks_parameters parameters?;
};

public type Hookdelivery_response record {
    # The response headers received when the delivery was made.
    record {}? headers;
    # The response payload received.
    record {}? payload;
};

public type Repository_template_repository_permissions record {
    boolean admin?;
    boolean maintain?;
    boolean push?;
    boolean triage?;
    boolean pull?;
};

public type Filecommit_commit_verification record {
    boolean verified?;
    string reason?;
    string? signature?;
    string? payload?;
};

# object containing information about the committer.
public type Reposownerrepocontentspath_committer_1 record {
    # The name of the author (or committer) of the commit
    string name?;
    # The email of the author (or committer) of the commit
    string email?;
};

public type Repositoryruleset__links_self record {
    # The URL of the ruleset
    string href?;
};

public type Commit record {
    # An array of files added in the commit.
    string[] added?;
    # Metaproperties for Git author/committer information.
    Committer author;
    # Metaproperties for Git author/committer information.
    Committer committer;
    # Whether this commit is distinct from any that have been pushed before.
    boolean 'distinct;
    string id;
    # The commit message.
    string message;
    # An array of files modified by the commit.
    string[] modified?;
    # An array of files removed in the commit.
    string[] removed?;
    # The ISO 8601 timestamp of the commit.
    string timestamp;
    string tree_id;
    # URL that points to the commit API resource.
    string url;
};

# Parameters for a repository ruleset ref name condition
public type RepositoryRulesetConditions record {
    Repositoryrulesetconditions_ref_name ref_name?;
};

# The source branch and directory used to publish your Pages site.
public type Repo_pages_body_1 anydata|anydata?;

# Activity
public type Activity record {
    int id;
    string node_id;
    # The SHA of the commit before the activity.
    string before;
    # The SHA of the commit after the activity.
    string after;
    # The full Git reference, formatted as `refs/heads/<branch name>`.
    string ref;
    # The time when the activity occurred.
    string timestamp;
    # The type of the activity that was performed.
    "push"|"force_push"|"branch_deletion"|"branch_creation"|"pr_merge"|"merge_queue_merge" activity_type;
    # A GitHub user.
    NullableSimpleUser? actor;
};

public type Protectedbranch_enforce_admins record {|
    string url;
    boolean enabled;
|};

public type Contents_path_body record {
    # The commit message.
    string message;
    # The new file content, using Base64 encoding.
    string content;
    # **Required if you are updating a file**. The blob SHA of the file being replaced.
    string sha?;
    # The branch name. Default: the repository’s default branch.
    string branch?;
    # The person that committed the file. Default: the authenticated user.
    Reposownerrepocontentspath_committer committer?;
    # The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.
    Reposownerrepocontentspath_author author?;
};

public type Reposownerrepobranchesbranchprotection_required_status_checks_checks record {
    # The name of the required check
    string context;
    # The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.
    int app_id?;
};

public type Branchwithprotection__links record {
    string html;
    string self;
};

public type PagesSourceHash record {
    string branch;
    string path;
};

# The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.
public type DeploymentBranchPolicySettings record {
    # Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`.
    boolean protected_branches;
    # Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`.
    boolean custom_branch_policies;
};

# Only allow users with bypass permission to create matching refs.
public type RepositoryRuleCreation record {
    "creation" 'type;
};

# Short Branch
public type ShortBranch record {
    string name;
    Shortbranch_commit 'commit;
    boolean protected;
    # Branch Protection
    BranchProtection protection?;
    string protection_url?;
};

# A list of errors found in a repo's CODEOWNERS file
public type CodeownersErrors record {
    Codeownerserrors_errors[] errors;
};

# Configuration object of the webhook
public type WebhookConfig record {
    # The URL to which the payloads will be delivered.
    WebhookConfigUrl url?;
    # The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
    WebhookConfigContentType content_type?;
    # If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
    WebhookConfigSecret secret?;
    WebhookConfigInsecureSsl insecure_ssl?;
};

# Require status checks to pass before merging. Set to `null` to disable.
public type Reposownerrepobranchesbranchprotection_required_status_checks record {
    # Require branches to be up to date before merging.
    boolean strict;
    # **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
    string[] contexts;
    # The list of status checks to require in order to merge into this branch.
    Reposownerrepobranchesbranchprotection_required_status_checks_checks[] checks?;
};

# Groups of organization members that gives permissions on specified repositories.
public type Team record {
    boolean deleted?;
    # Description of the team
    string? description?;
    string html_url?;
    # Unique identifier of the team
    int id;
    string members_url?;
    # Name of the team
    string name;
    string node_id?;
    Team_parent? parent?;
    # Permission that the team will have for its repositories
    string permission?;
    "open"|"closed"|"secret" privacy?;
    "notifications_enabled"|"notifications_disabled" notification_setting?;
    string repositories_url?;
    string slug?;
    # URL for the team
    string url?;
};

# The person that committed the file. Default: the authenticated user.
public type Reposownerrepocontentspath_committer record {
    # The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
    string name;
    # The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
    string email;
    string date?;
};

# Only allow users with bypass permissions to delete matching refs.
public type RepositoryRuleDeletion record {
    "deletion" 'type;
};

# Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
public type Branchprotection_allow_fork_syncing record {
    boolean enabled?;
};

# A collection of related issues and pull requests.
public type NullableMilestone record {
    string url;
    string html_url;
    string labels_url;
    int id;
    string node_id;
    # The number of the milestone.
    int number;
    # The state of the milestone.
    "open"|"closed" state;
    # The title of the milestone.
    string title;
    string? description;
    # A GitHub user.
    NullableSimpleUser? creator;
    int open_issues;
    int closed_issues;
    string created_at;
    string updated_at;
    string? closed_at;
    string? due_on;
};

# Only allow users with bypass permission to update matching refs.
public type RepositoryRuleUpdate record {
    "update" 'type;
    Repositoryruleupdate_parameters parameters?;
};

# Page Build
public type PageBuild record {
    string url;
    string status;
    Pagebuild_error 'error;
    # A GitHub user.
    NullableSimpleUser? pusher;
    string 'commit;
    int duration;
    string created_at;
    string updated_at;
};

# An SSH key granting access to a single repository.
public type DeployKey record {
    int id;
    string 'key;
    string url;
    string title;
    boolean verified;
    string created_at;
    boolean read_only;
    string? added_by?;
    string? last_used?;
};

# Parameters for a repository ID condition
public type RepositoryRulesetConditionsRepositoryIdTarget record {
    Repositoryrulesetconditionsrepositoryidtarget_repository_id repository_id;
};

# Code Frequency Stat
public type CodeFrequencyStat int[];

# The configuration for GitHub Pages for a repository.
public type Page record {
    # The API address for accessing this Page resource.
    string url;
    # The status of the most recent build of the Page.
    "built"|"building"|"errored" status;
    # The Pages site's custom domain
    string? cname;
    # The state if the domain is verified
    "pending"|"verified"|"unverified" protected_domain_state?;
    # The timestamp when a pending domain becomes unverified.
    string? pending_domain_unverified_at?;
    # Whether the Page has a custom 404 page.
    boolean custom_404;
    # The web address the Page can be accessed from.
    string html_url?;
    # The process in which the Page will be built.
    "legacy"|"workflow" build_type?;
    PagesSourceHash 'source?;
    # Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.
    boolean 'public;
    PagesHttpsCertificate https_certificate?;
    # Whether https is enabled on the domain
    boolean https_enforced?;
};

# Allow specific users, teams, or apps to bypass pull request requirements.
public type Protectedbranchpullrequestreview_bypass_pull_request_allowances record {
    # The list of users allowed to bypass pull request requirements.
    SimpleUser[] users?;
    # The list of teams allowed to bypass pull request requirements.
    Team[] teams?;
    # The list of apps allowed to bypass pull request requirements.
    Integration[] apps?;
};

public type Filecommit_content record {
    string name?;
    string path?;
    string sha?;
    int size?;
    string url?;
    string html_url?;
    string git_url?;
    string download_url?;
    string 'type?;
    Filecommit_content__links _links?;
};

# Protected Branch Admin Enforced
public type ProtectedBranchAdminEnforced record {
    string url;
    boolean enabled;
};

# Content Traffic
public type ContentTraffic record {
    string path;
    string title;
    int count;
    int uniques;
};

public type Repositoryrulesetconditions_ref_name record {
    # Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.
    string[] include?;
    # Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
    string[] exclude?;
};

public type Hooks_hook_id_body_1 record {
    # Key/value pairs to provide settings for this webhook.
    Reposownerrepohookshook_id_config config?;
    # Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.
    string[] events?;
    # Determines a list of events to be added to the list of events that the Hook triggers for.
    string[] add_events?;
    # Determines a list of events to be removed from the list of events that the Hook triggers for.
    string[] remove_events?;
    # Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
    boolean active?;
};

public type Repository_template_repository record {
    int id?;
    string node_id?;
    string name?;
    string full_name?;
    Repository_template_repository_owner owner?;
    boolean 'private?;
    string html_url?;
    string description?;
    boolean 'fork?;
    string url?;
    string archive_url?;
    string assignees_url?;
    string blobs_url?;
    string branches_url?;
    string collaborators_url?;
    string comments_url?;
    string commits_url?;
    string compare_url?;
    string contents_url?;
    string contributors_url?;
    string deployments_url?;
    string downloads_url?;
    string events_url?;
    string forks_url?;
    string git_commits_url?;
    string git_refs_url?;
    string git_tags_url?;
    string git_url?;
    string issue_comment_url?;
    string issue_events_url?;
    string issues_url?;
    string keys_url?;
    string labels_url?;
    string languages_url?;
    string merges_url?;
    string milestones_url?;
    string notifications_url?;
    string pulls_url?;
    string releases_url?;
    string ssh_url?;
    string stargazers_url?;
    string statuses_url?;
    string subscribers_url?;
    string subscription_url?;
    string tags_url?;
    string teams_url?;
    string trees_url?;
    string clone_url?;
    string mirror_url?;
    string hooks_url?;
    string svn_url?;
    string homepage?;
    string language?;
    int forks_count?;
    int stargazers_count?;
    int watchers_count?;
    int size?;
    string default_branch?;
    int open_issues_count?;
    boolean is_template?;
    string[] topics?;
    boolean has_issues?;
    boolean has_projects?;
    boolean has_wiki?;
    boolean has_pages?;
    boolean has_downloads?;
    boolean archived?;
    boolean disabled?;
    string visibility?;
    string pushed_at?;
    string created_at?;
    string updated_at?;
    Repository_template_repository_permissions permissions?;
    boolean allow_rebase_merge?;
    string temp_clone_token?;
    boolean allow_squash_merge?;
    boolean allow_auto_merge?;
    boolean delete_branch_on_merge?;
    boolean allow_update_branch?;
    boolean use_squash_pr_title_as_default?;
    # The default value for a squash merge commit title:
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
    "PR_TITLE"|"COMMIT_OR_PR_TITLE" squash_merge_commit_title?;
    # The default value for a squash merge commit message:
    # 
    # - `PR_BODY` - default to the pull request's body.
    # - `COMMIT_MESSAGES` - default to the branch's commit messages.
    # - `BLANK` - default to a blank commit message.
    "PR_BODY"|"COMMIT_MESSAGES"|"BLANK" squash_merge_commit_message?;
    # The default value for a merge commit title.
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
    "PR_TITLE"|"MERGE_MESSAGE" merge_commit_title?;
    # The default value for a merge commit message.
    # 
    # - `PR_TITLE` - default to the pull request's title.
    # - `PR_BODY` - default to the pull request's body.
    # - `BLANK` - default to a blank commit message.
    "PR_BODY"|"PR_TITLE"|"BLANK" merge_commit_message?;
    boolean allow_merge_commit?;
    int subscribers_count?;
    int network_count?;
};

# A repository rule with ruleset details.
public type RepositoryRuleDetailed record {*RepositoryRuleCreation; *RepositoryRuleRulesetInfo;}|record {*RepositoryRuleUpdate; *RepositoryRuleRulesetInfo;}|record {*RepositoryRuleDeletion; *RepositoryRuleRulesetInfo;}|record {*RepositoryRuleRequiredLinearHistory; *RepositoryRuleRulesetInfo;}|record {*RepositoryRuleRequiredDeployments; *RepositoryRuleRulesetInfo;}|record {*RepositoryRuleRequiredSignatures; *RepositoryRuleRulesetInfo;}|record {*RepositoryRulePullRequest; *RepositoryRuleRulesetInfo;}|record {*RepositoryRuleRequiredStatusChecks; *RepositoryRuleRulesetInfo;}|record {*RepositoryRuleNonFastForward; *RepositoryRuleRulesetInfo;}|record {*RepositoryRuleCommitMessagePattern; *RepositoryRuleRulesetInfo;}|record {*RepositoryRuleCommitAuthorEmailPattern; *RepositoryRuleRulesetInfo;}|record {*RepositoryRuleCommitterEmailPattern; *RepositoryRuleRulesetInfo;}|record {*RepositoryRuleBranchNamePattern; *RepositoryRuleRulesetInfo;}|record {*RepositoryRuleTagNamePattern; *RepositoryRuleRulesetInfo;};

# Use the `status` property to enable or disable GitHub Advanced Security for this repository. For more information, see "[About GitHub Advanced Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security)."
public type Reposownerrepo_security_and_analysis_advanced_security record {
    # Can be `enabled` or `disabled`.
    string status?;
};

public type Repo_rulesets_body record {
    # The name of the ruleset.
    string name;
    # The target of the ruleset.
    "branch"|"tag" target?;
    # The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
    RepositoryRuleEnforcement enforcement;
    # The actors that can bypass the rules in this ruleset
    RepositoryRulesetBypassActor[] bypass_actors?;
    # Parameters for a repository ruleset ref name condition
    RepositoryRulesetConditions conditions?;
    # An array of rules within the ruleset.
    RepositoryRule[] rules?;
};

public type Collaborator_permissions record {
    boolean pull;
    boolean triage?;
    boolean push;
    boolean maintain?;
    boolean admin;
};

# Page Build Status
public type PageBuildStatus record {
    string url;
    string status;
};

public type Codeownerserrors_errors record {
    # The line number where this errors occurs.
    int line;
    # The column number where this errors occurs.
    int column;
    # The contents of the line where the error occurs.
    string 'source?;
    # The type of error.
    string kind;
    # Suggested action to fix the error. This will usually be `null`, but is provided for some common errors.
    string? suggestion?;
    # A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting).
    string message;
    # The path of the file where the error occured.
    string path;
};

public type Assets_asset_id_body record {
    # The file name of the asset.
    string name?;
    # An alternate short description of the asset. Used in place of the filename.
    string label?;
    string state?;
};

public type PagesHttpsCertificate record {
    "new"|"authorization_created"|"authorization_pending"|"authorized"|"authorization_revoked"|"issued"|"uploaded"|"approved"|"errored"|"bad_authz"|"destroy_pending"|"dns_changed" state;
    string description;
    # Array of the domain set and its alternate name (if it is configured)
    string[] domains;
    string expires_at?;
};

# The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
public type WebhookConfigContentType string;

# Whether or not a user who created the job is prevented from approving their own job.
public type PreventSelfReview boolean;

# Response
public type RuleSuite record {
    # The unique identifier of the rule insight.
    int id?;
    # The number that identifies the user.
    int actor_id?;
    # The handle for the GitHub user account.
    string actor_name?;
    # The first commit sha before the push evaluation.
    string before_sha?;
    # The last commit sha in the push evaluation.
    string after_sha?;
    # The ref name that the evaluation ran on.
    string ref?;
    # The ID of the repository associated with the rule evaluation.
    int repository_id?;
    # The name of the repository without the `.git` extension.
    string repository_name?;
    string pushed_at?;
    # The result of the rule evaluations for rules with the `active` enforcement status.
    "pass"|"fail"|"bypass" result?;
    # The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`.
    "pass"|"fail" evaluation_result?;
    # Details on the evaluated rules.
    Rulesuite_rule_evaluations[] rule_evaluations?;
};

public type Filecommit_commit_author record {
    string date?;
    string name?;
    string email?;
};

# Conditions for an organization ruleset. The conditions object should contain both `repository_name` and `ref_name` properties or both `repository_id` and `ref_name` properties.
public type OrgRulesetConditions record {*RepositoryRulesetConditions; *RepositoryRulesetConditionsRepositoryNameTarget;}|record {*RepositoryRulesetConditions; *RepositoryRulesetConditionsRepositoryIdTarget;};

# Prevent users with push access from force pushing to refs.
public type RepositoryRuleNonFastForward record {
    "non_fast_forward" 'type;
};

# Enable or disable Dependabot security updates for the repository.
public type Securityandanalysis_dependabot_security_updates record {
    # The enablement status of Dependabot security updates for the repository.
    "enabled"|"disabled" status?;
};

public type Repo_transfer_body record {
    # The username or organization name the repository will be transferred to.
    string new_owner;
    # The new name to be given to the repository.
    string new_name?;
    # ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.
    int[] team_ids?;
};

# File Commit
public type FileCommit record {
    Filecommit_content? content;
    Filecommit_commit 'commit;
};

# Thread
public type _Thread record {
    string id;
    # Minimal Repository
    MinimalRepository repository;
    Thread_subject subject;
    string reason;
    boolean unread;
    string updated_at;
    string? last_read_at;
    string url;
    string subscription_url;
};

public type Branchprotection_required_linear_history record {
    boolean enabled?;
};

# Tag
public type Tag record {
    string name;
    Shortbranch_commit 'commit;
    string zipball_url;
    string tarball_url;
    string node_id;
};

# Allow specific users, teams, or apps to bypass pull request requirements.
public type Reposownerrepobranchesbranchprotection_required_pull_request_reviews_bypass_pull_request_allowances record {
    # The list of user `login`s allowed to bypass pull request requirements.
    string[] users?;
    # The list of team `slug`s allowed to bypass pull request requirements.
    string[] teams?;
    # The list of app `slug`s allowed to bypass pull request requirements.
    string[] apps?;
};

public type Protectedbranch_required_pull_request_reviews_dismissal_restrictions record {
    string url;
    string users_url;
    string teams_url;
    SimpleUser[] users;
    Team[] teams;
    Integration[] apps?;
};

# Key/value pairs to provide settings for this webhook.
public type Reposownerrepohooks_config record {
    # The URL to which the payloads will be delivered.
    WebhookConfigUrl url?;
    # The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
    WebhookConfigContentType content_type?;
    # If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
    WebhookConfigSecret secret?;
    WebhookConfigInsecureSsl insecure_ssl?;
    string token?;
    string digest?;
};

# Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.
public type Reposownerrepobranchesbranchprotection_restrictions record {
    # The list of user `login`s with push access
    string[] users;
    # The list of team `slug`s with push access
    string[] teams;
    # The list of app `slug`s with push access
    string[] apps?;
};

# Protected Branch Required Status Check
public type ProtectedBranchRequiredStatusCheck record {
    string url?;
    string enforcement_level?;
    string[] contexts;
    Protectedbranchrequiredstatuscheck_checks[] checks;
    string contexts_url?;
    boolean strict?;
};

public type Protection_required_pull_request_reviews_body record {
    # Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
    Reposownerrepobranchesbranchprotection_required_pull_request_reviews_dismissal_restrictions dismissal_restrictions?;
    # Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
    boolean dismiss_stale_reviews?;
    # Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed.
    boolean require_code_owner_reviews?;
    # Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
    int required_approving_review_count?;
    # Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`
    boolean require_last_push_approval?;
    # Allow specific users, teams, or apps to bypass pull request requirements.
    Reposownerrepobranchesbranchprotection_required_pull_request_reviews_bypass_pull_request_allowances bypass_pull_request_allowances?;
};

public type Tags_protection_body record {
    # An optional glob pattern to match against when enforcing tag protection.
    string pattern;
};

public type Branchshort_commit record {
    string sha;
    string url;
};

public type Org_rulesets_body record {
    # The name of the ruleset.
    string name;
    # The target of the ruleset.
    "branch"|"tag" target?;
    # The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
    RepositoryRuleEnforcement enforcement;
    # The actors that can bypass the rules in this ruleset
    RepositoryRulesetBypassActor[] bypass_actors?;
    # Conditions for an organization ruleset. The conditions object should contain both `repository_name` and `ref_name` properties or both `repository_id` and `ref_name` properties.
    OrgRulesetConditions conditions?;
    # An array of rules within the ruleset.
    RepositoryRule[] rules?;
};

public type Environment_name_deployment_protection_rules_body record {
    # The ID of the custom app that will be enabled on the environment.
    int integration_id?;
};

public type Repositoryrulerequireddeployments_parameters record {
    # The environments that must be successfully deployed to before branches can be merged.
    string[] required_deployment_environments;
};

public type Rulesuite_rule_evaluations record {
    Rulesuite_rule_source rule_source?;
    # The enforcement level of this rule source.
    "active"|"evaluate"|"deleted ruleset" enforcement?;
    # The result of the evaluation of the individual rule.
    "pass"|"fail" result?;
    # The type of rule.
    string rule_type?;
    # Any associated details with the rule evaluation.
    string details?;
};

# How the author is associated with the repository.
public type AuthorAssociation "COLLABORATOR"|"CONTRIBUTOR"|"FIRST_TIMER"|"FIRST_TIME_CONTRIBUTOR"|"MANNEQUIN"|"MEMBER"|"NONE"|"OWNER";

# Details of a deployment environment
public type Environment record {
    # The id of the environment.
    int id;
    string node_id;
    # The name of the environment.
    string name;
    string url;
    string html_url;
    # The time that the environment was created, in ISO 8601 format.
    string created_at;
    # The time that the environment was last updated, in ISO 8601 format.
    string updated_at;
    # Built-in deployment protection rules for the environment.
    (record {
        int id;
        string node_id;
        string 'type;
        # The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).
        WaitTimer wait_timer?;
    }|record {
        int id;
        string node_id;
        # Whether deployments to this environment can be approved by the user who created the deployment.
        boolean prevent_self_review?;
        string 'type;
        # The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
        record {
            # The type of reviewer.
            DeploymentReviewerType 'type?;
            SimpleUser|Team reviewer?;
        }[] reviewers?;
    }|record {int id; string node_id; string 'type;})[] protection_rules?;
    # The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.
    DeploymentBranchPolicySettings? deployment_branch_policy?;
};

public type Rulesuite_rule_source record {
    # The type of rule source.
    string 'type?;
    # The ID of the rule source.
    int? id?;
    # The name of the rule source.
    string? name?;
};

public type User record {
    string avatar_url?;
    boolean deleted?;
    string? email?;
    string events_url?;
    string followers_url?;
    string following_url?;
    string gists_url?;
    string gravatar_id?;
    string html_url?;
    int id;
    string login;
    string name?;
    string node_id?;
    string organizations_url?;
    string received_events_url?;
    string repos_url?;
    boolean site_admin?;
    string starred_url?;
    string subscriptions_url?;
    "Bot"|"User"|"Organization" 'type?;
    string url?;
};

public type Reactions record {
    int \+1;
    int \-1;
    int confused;
    int eyes;
    int heart;
    int hooray;
    int laugh;
    int rocket;
    int total_count;
    string url;
};

public type Pullrequestsimple_labels record {
    int id;
    string node_id;
    string url;
    string name;
    string description;
    string color;
    boolean default;
};

# Parameters to be used for the tag_name_pattern rule
public type RepositoryRuleTagNamePattern record {
    "tag_name_pattern" 'type;
    Repositoryrulecommitmessagepattern_parameters parameters?;
};

# Contributor Activity
public type ContributorActivity record {
    # A GitHub user.
    NullableSimpleUser? author;
    int total;
    Contributoractivity_weeks[] weeks;
};

public type Repo_forks_body record {
    # Optional parameter to specify the organization name if forking into an organization.
    string organization?;
    # When forking from an existing repository, a new name for the fork.
    string name?;
    # When forking from an existing repository, fork with only the default branch.
    boolean default_branch_only?;
};

# Community Profile
public type CommunityProfile record {
    int health_percentage;
    string? description;
    string? documentation;
    Communityprofile_files files;
    string? updated_at;
    boolean content_reports_enabled?;
};
