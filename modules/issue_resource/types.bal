// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    ClientHttp1Settings http1Settings?;
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings?;
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 60;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache?;
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits?;
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
|};

# Provides settings related to HTTP/1.x protocol.
public type ClientHttp1Settings record {|
    # Specifies whether to reuse a connection for multiple requests
    http:KeepAlive keepAlive = http:KEEPALIVE_AUTO;
    # The chunking behaviour of the request
    http:Chunking chunking = http:CHUNKING_AUTO;
    # Proxy server related options
    ProxyConfig proxy?;
|};

# Proxy server configurations to be used with the HTTP client endpoint.
public type ProxyConfig record {|
    # Host name of the proxy server
    string host = "";
    # Proxy server port
    int port = 0;
    # Proxy server username
    string userName = "";
    # Proxy server password
    @display {label: "", kind: "password"}
    string password = "";
|};

public type SecurityAndAnalysis record {
    Securityandanalysis_advanced_security advanced_security?;
    # Enable or disable Dependabot security updates for the repository.
    Securityandanalysis_dependabot_security_updates dependabot_security_updates?;
    Securityandanalysis_advanced_security secret_scanning?;
    Securityandanalysis_advanced_security secret_scanning_push_protection?;
};

# Removed from Project Issue Event
public type RemovedFromProjectIssueEvent record {
    int id;
    string node_id;
    string url;
    # A GitHub user.
    SimpleUser actor;
    string event;
    string? commit_id;
    string? commit_url;
    string created_at;
    # GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    NullableIntegration? performed_via_github_app;
    Addedtoprojectissueevent_project_card project_card?;
};

public type Repo_issues_body record {
    # The title of the issue.
    string|int title;
    # The contents of the issue.
    string body?;
    # Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_
    string? assignee?;
    string|int? milestone?;
    # Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
    (string|record {int id?; string name?; string? description?; string? color?;})[] labels?;
    # Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
    string[] assignees?;
};

# Review Requested Issue Event
public type ReviewRequestedIssueEvent record {
    int id;
    string node_id;
    string url;
    # A GitHub user.
    SimpleUser actor;
    string event;
    string? commit_id;
    string? commit_url;
    string created_at;
    # GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    NullableIntegration? performed_via_github_app;
    # A GitHub user.
    SimpleUser review_requester;
    # Groups of organization members that gives permissions on specified repositories.
    Team requested_team?;
    # A GitHub user.
    SimpleUser requested_reviewer?;
};

public type Timelinecrossreferencedevent_source record {
    string 'type?;
    # The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
    Issue issue?;
};

# Moved Column in Project Issue Event
public type MovedColumnInProjectIssueEvent record {
    int id;
    string node_id;
    string url;
    # A GitHub user.
    SimpleUser actor;
    string event;
    string? commit_id;
    string? commit_url;
    string created_at;
    # GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    NullableIntegration? performed_via_github_app;
    Addedtoprojectissueevent_project_card project_card?;
};

public type Milestonedissueevent_milestone record {
    string title;
};

public type Repo_labels_body record {
    # The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
    string name;
    # The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
    string color?;
    # A short description of the label. Must be 100 characters or fewer.
    string description?;
};

public type Milestones_milestone_number_body record {
    # The title of the milestone.
    string title?;
    # The state of the milestone. Either `open` or `closed`.
    "open"|"closed" state?;
    # A description of the milestone.
    string description?;
    # The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
    string due_on?;
};

# State Change Issue Event
public type StateChangeIssueEvent record {
    int id;
    string node_id;
    string url;
    # A GitHub user.
    SimpleUser actor;
    string event;
    string? commit_id;
    string? commit_url;
    string created_at;
    # GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    NullableIntegration? performed_via_github_app;
    string? state_reason?;
};

public type Renamedissueevent_rename record {
    string 'from;
    string to;
};

# Converted Note to Issue Issue Event
public type ConvertedNoteToIssueIssueEvent record {
    int id;
    string node_id;
    string url;
    # A GitHub user.
    SimpleUser actor;
    string event;
    string? commit_id;
    string? commit_url;
    string created_at;
    # GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    Integration performed_via_github_app;
    Addedtoprojectissueevent_project_card project_card?;
};

# Review Dismissed Issue Event
public type ReviewDismissedIssueEvent record {
    int id;
    string node_id;
    string url;
    # A GitHub user.
    SimpleUser actor;
    string event;
    string? commit_id;
    string? commit_url;
    string created_at;
    # GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    NullableIntegration? performed_via_github_app;
    Reviewdismissedissueevent_dismissed_review dismissed_review;
};

public type License record {
    string 'key;
    string name;
    string node_id;
    string spdx_id;
    string? url;
};

# Milestoned Issue Event
public type MilestonedIssueEvent record {
    int id;
    string node_id;
    string url;
    # A GitHub user.
    SimpleUser actor;
    string event;
    string? commit_id;
    string? commit_url;
    string created_at;
    # GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    NullableIntegration? performed_via_github_app;
    Milestonedissueevent_milestone milestone;
};

public type ReactionRollup record {
    string url;
    int total_count;
    int \+1;
    int \-1;
    int laugh;
    int confused;
    int heart;
    int hooray;
    int eyes;
    int rocket;
};

public type Thread_subject record {
    string title;
    string url;
    string latest_comment_url;
    string 'type;
};

# Unassigned Issue Event
public type UnassignedIssueEvent record {
    int id;
    string node_id;
    string url;
    # A GitHub user.
    SimpleUser actor;
    string event;
    string? commit_id;
    string? commit_url;
    string created_at;
    # GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    NullableIntegration? performed_via_github_app;
    # A GitHub user.
    SimpleUser assignee;
    # A GitHub user.
    SimpleUser assigner;
};

# Unlabeled Issue Event
public type UnlabeledIssueEvent record {
    int id;
    string node_id;
    string url;
    # A GitHub user.
    SimpleUser actor;
    string event;
    string? commit_id;
    string? commit_url;
    string created_at;
    # GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    NullableIntegration? performed_via_github_app;
    Labeledissueevent_label label;
};

# Issue Event Milestone
public type IssueEventMilestone record {
    string title;
};

# Commit Comment
public type CommitComment record {
    string html_url;
    string url;
    int id;
    string node_id;
    string body;
    string? path;
    int? position;
    int? line;
    string commit_id;
    # A GitHub user.
    NullableSimpleUser? user;
    string created_at;
    string updated_at;
    # How the author is associated with the repository.
    AuthorAssociation author_association;
    ReactionRollup reactions?;
};

public type Labeledissueevent_label record {
    string name;
    string color;
};

public type Timelinereviewedevent__links_html record {
    string href;
};

public type Timelinereviewedevent__links record {
    Timelinereviewedevent__links_html html;
    Timelinereviewedevent__links_html pull_request;
};

# GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
public type NullableIntegration record {
    # Unique identifier of the GitHub app
    int id;
    # The slug name of the GitHub app
    string slug?;
    string node_id;
    # A GitHub user.
    NullableSimpleUser? owner;
    # The name of the GitHub app
    string name;
    string? description;
    string external_url;
    string html_url;
    string created_at;
    string updated_at;
    # The set of permissions for the GitHub app
    Integration_permissions permissions;
    # The list of events for the GitHub app
    string[] events;
    # The number of installations associated with the GitHub app
    int installations_count?;
    string client_id?;
    string client_secret?;
    string? webhook_secret?;
    string pem?;
};

public type PullRequestReviewComment__links record {
    Link html;
    Link pull_request;
    Link self;
};

public type Team_parent record {
    # Description of the team
    string? description;
    string html_url;
    # Unique identifier of the team
    int id;
    string members_url;
    # Name of the team
    string name;
    string node_id;
    # Permission that the team will have for its repositories
    string permission;
    "open"|"closed"|"secret" privacy;
    # Whether team members will receive notifications when their team is @mentioned
    "notifications_enabled"|"notifications_disabled" notification_setting;
    string repositories_url;
    string slug;
    # URL for the team
    string url;
};

# Labeled Issue Event
public type LabeledIssueEvent record {
    int id;
    string node_id;
    string url;
    # A GitHub user.
    SimpleUser actor;
    string event;
    string? commit_id;
    string? commit_url;
    string created_at;
    # GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    NullableIntegration? performed_via_github_app;
    Labeledissueevent_label label;
};

public type Repository_permissions record {
    boolean admin;
    boolean maintain?;
    boolean pull;
    boolean push;
    boolean triage?;
};

# The set of permissions for the GitHub app
public type App_6_permissions record {
    "read"|"write" actions?;
    "read"|"write" administration?;
    "read"|"write" checks?;
    "read"|"write" content_references?;
    "read"|"write" contents?;
    "read"|"write" deployments?;
    "read"|"write" discussions?;
    "read"|"write" emails?;
    "read"|"write" environments?;
    "read"|"write" issues?;
    "read"|"write" keys?;
    "read"|"write" members?;
    "read"|"write" metadata?;
    "read"|"write" organization_administration?;
    "read"|"write" organization_hooks?;
    "read"|"write" organization_packages?;
    "read"|"write" organization_plan?;
    "read"|"write"|"admin" organization_projects?;
    "read"|"write" organization_secrets?;
    "read"|"write" organization_self_hosted_runners?;
    "read"|"write" organization_user_blocking?;
    "read"|"write" packages?;
    "read"|"write" pages?;
    "read"|"write" pull_requests?;
    "read"|"write" repository_hooks?;
    "read"|"write" repository_projects?;
    "read"|"write" secret_scanning_alerts?;
    "read"|"write" secrets?;
    "read"|"write" security_events?;
    "read"|"write" security_scanning_alert?;
    "read"|"write" single_file?;
    "read"|"write" statuses?;
    "read"|"write" team_discussions?;
    "read"|"write" vulnerability_alerts?;
    "read"|"write" workflows?;
};

public type Label record {
    # 6-character hex code, without the leading #, identifying the color
    string color;
    boolean default;
    string? description;
    int id;
    # The name of the label.
    string name;
    string node_id;
    # URL for the label
    string url;
};

public type Issue_pull_request record {
    string diff_url?;
    string html_url?;
    string? merged_at?;
    string patch_url?;
    string url?;
};

# GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
public type App_6 record {
    string? created_at;
    string? description;
    # The list of events for the GitHub app
    ("branch_protection_rule"|"check_run"|"check_suite"|"code_scanning_alert"|"commit_comment"|"content_reference"|"create"|"delete"|"deployment"|"deployment_review"|"deployment_status"|"deploy_key"|"discussion"|"discussion_comment"|"fork"|"gollum"|"issues"|"issue_comment"|"label"|"member"|"membership"|"milestone"|"organization"|"org_block"|"page_build"|"project"|"project_card"|"project_column"|"public"|"pull_request"|"pull_request_review"|"pull_request_review_comment"|"push"|"registry_package"|"release"|"repository"|"repository_dispatch"|"secret_scanning_alert"|"star"|"status"|"team"|"team_add"|"watch"|"workflow_dispatch"|"workflow_run"|"reminder"|"pull_request_review_thread")[] events?;
    string? external_url;
    string html_url;
    # Unique identifier of the GitHub app
    int? id;
    # The name of the GitHub app
    string name;
    string node_id;
    User? owner;
    # The set of permissions for the GitHub app
    App_6_permissions permissions?;
    # The slug name of the GitHub app
    string slug?;
    string? updated_at;
};

# Code Of Conduct
public type CodeOfConduct record {
    string 'key;
    string name;
    string url;
    string body?;
    string? html_url;
};

public type Comments_comment_id_body_2 record {
    # The contents of the comment.
    string body;
};

# Assigned Issue Event
public type AssignedIssueEvent record {
    int id;
    string node_id;
    string url;
    # A GitHub user.
    SimpleUser actor;
    string event;
    string? commit_id;
    string? commit_url;
    string created_at;
    # GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    Integration performed_via_github_app;
    # A GitHub user.
    SimpleUser assignee;
    # A GitHub user.
    SimpleUser assigner;
};

# Issue Event Rename
public type IssueEventRename record {
    string 'from;
    string to;
};

# Issue Event Project Card
public type IssueEventProjectCard record {
    string url;
    int id;
    string project_url;
    int project_id;
    string column_name;
    string previous_column_name?;
};

# Demilestoned Issue Event
public type DemilestonedIssueEvent record {
    int id;
    string node_id;
    string url;
    # A GitHub user.
    SimpleUser actor;
    string event;
    string? commit_id;
    string? commit_url;
    string created_at;
    # GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    NullableIntegration? performed_via_github_app;
    Milestonedissueevent_milestone milestone;
};

public type Issue_number_assignees_body_1 record {
    # Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._
    string[] assignees?;
};

public type User_2 record {
    string avatar_url?;
    boolean deleted?;
    string? email?;
    string events_url?;
    string followers_url?;
    string following_url?;
    string gists_url?;
    string gravatar_id?;
    string html_url?;
    int id;
    string login;
    string name?;
    string node_id?;
    string organizations_url?;
    string received_events_url?;
    string repos_url?;
    boolean site_admin?;
    string starred_url?;
    string subscriptions_url?;
    "Bot"|"User"|"Organization"|"Mannequin" 'type?;
    string url?;
};

# Review Request Removed Issue Event
public type ReviewRequestRemovedIssueEvent record {
    int id;
    string node_id;
    string url;
    # A GitHub user.
    SimpleUser actor;
    string event;
    string? commit_id;
    string? commit_url;
    string created_at;
    # GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    NullableIntegration? performed_via_github_app;
    # A GitHub user.
    SimpleUser review_requester;
    # Groups of organization members that gives permissions on specified repositories.
    Team requested_team?;
    # A GitHub user.
    SimpleUser requested_reviewer?;
};

public type Gitcommit_verification record {
    boolean verified;
    string reason;
    string? signature;
    string? payload;
};

public type Reposownerrepoissuesissue_numberlabels_labels record {
    string name;
};

# Timeline Unassigned Issue Event
public type TimelineUnassignedIssueEvent record {
    int id;
    string node_id;
    string url;
    # A GitHub user.
    SimpleUser actor;
    string event;
    string? commit_id;
    string? commit_url;
    string created_at;
    # GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    NullableIntegration? performed_via_github_app;
    # A GitHub user.
    SimpleUser assignee;
};

# The set of permissions for the GitHub app
public type Integration_permissions record {|
    string issues?;
    string checks?;
    string metadata?;
    string contents?;
    string deployments?;
    string...;
|};

# Issue Event Label
public type IssueEventLabel record {
    string? name;
    string? color;
};

# Timeline Cross Referenced Event
public type TimelineCrossReferencedEvent record {
    string event;
    # A GitHub user.
    SimpleUser actor?;
    string created_at;
    string updated_at;
    Timelinecrossreferencedevent_source 'source;
};

public type Link record {
    string href;
};

public type Gitcommit_tree record {
    # SHA for the commit
    string sha;
    string url;
};

public type Addedtoprojectissueevent_project_card record {
    int id;
    string url;
    int project_id;
    string project_url;
    string column_name;
    string previous_column_name?;
};

# A git repository
public type Repository record {
    # Whether to allow auto-merge for pull requests.
    boolean allow_auto_merge = false;
    # Whether to allow private forks
    boolean allow_forking?;
    # Whether to allow merge commits for pull requests.
    boolean allow_merge_commit = true;
    # Whether to allow rebase merges for pull requests.
    boolean allow_rebase_merge = true;
    # Whether to allow squash merges for pull requests.
    boolean allow_squash_merge = true;
    boolean allow_update_branch?;
    string archive_url;
    # Whether the repository is archived.
    boolean archived;
    string assignees_url;
    string blobs_url;
    string branches_url;
    string clone_url;
    string collaborators_url;
    string comments_url;
    string commits_url;
    string compare_url;
    string contents_url;
    string contributors_url;
    int|string created_at;
    # The default branch of the repository.
    string default_branch;
    # Whether to delete head branches when pull requests are merged
    boolean delete_branch_on_merge = false;
    string deployments_url;
    string? description;
    # Returns whether or not this repository is disabled.
    boolean disabled?;
    string downloads_url;
    string events_url;
    boolean 'fork;
    int forks;
    int forks_count;
    string forks_url;
    string full_name;
    string git_commits_url;
    string git_refs_url;
    string git_tags_url;
    string git_url;
    # Whether the repository has discussions enabled.
    boolean has_discussions?;
    # Whether downloads are enabled.
    boolean has_downloads;
    # Whether issues are enabled.
    boolean has_issues;
    boolean has_pages;
    # Whether projects are enabled.
    boolean has_projects;
    # Whether the wiki is enabled.
    boolean has_wiki;
    string? homepage;
    string hooks_url;
    string html_url;
    # Unique identifier of the repository
    int id;
    boolean is_template?;
    string issue_comment_url;
    string issue_events_url;
    string issues_url;
    string keys_url;
    string labels_url;
    string? language;
    string languages_url;
    License? license;
    string master_branch?;
    string merges_url;
    string milestones_url;
    string? mirror_url;
    # The name of the repository.
    string name;
    string node_id;
    string notifications_url;
    int open_issues;
    int open_issues_count;
    string organization?;
    User? owner;
    Repository_permissions permissions?;
    # Whether the repository is private or public.
    boolean 'private;
    boolean 'public?;
    string pulls_url;
    int|string? pushed_at;
    string releases_url;
    string? role_name?;
    int size;
    string ssh_url;
    int stargazers?;
    int stargazers_count;
    string stargazers_url;
    string statuses_url;
    string subscribers_url;
    string subscription_url;
    string svn_url;
    string tags_url;
    string teams_url;
    string[] topics;
    string trees_url;
    string updated_at;
    string url;
    "public"|"private"|"internal" visibility;
    int watchers;
    int watchers_count;
    # Whether to require commit signoff.
    boolean web_commit_signoff_required?;
};

# Minimal Repository
public type MinimalRepository record {
    int id;
    string node_id;
    string name;
    string full_name;
    # A GitHub user.
    SimpleUser owner;
    boolean 'private;
    string html_url;
    string? description;
    boolean 'fork;
    string url;
    string archive_url;
    string assignees_url;
    string blobs_url;
    string branches_url;
    string collaborators_url;
    string comments_url;
    string commits_url;
    string compare_url;
    string contents_url;
    string contributors_url;
    string deployments_url;
    string downloads_url;
    string events_url;
    string forks_url;
    string git_commits_url;
    string git_refs_url;
    string git_tags_url;
    string git_url?;
    string issue_comment_url;
    string issue_events_url;
    string issues_url;
    string keys_url;
    string labels_url;
    string languages_url;
    string merges_url;
    string milestones_url;
    string notifications_url;
    string pulls_url;
    string releases_url;
    string ssh_url?;
    string stargazers_url;
    string statuses_url;
    string subscribers_url;
    string subscription_url;
    string tags_url;
    string teams_url;
    string trees_url;
    string clone_url?;
    string? mirror_url?;
    string hooks_url;
    string svn_url?;
    string? homepage?;
    string? language?;
    int forks_count?;
    int stargazers_count?;
    int watchers_count?;
    # The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
    int size?;
    string default_branch?;
    int open_issues_count?;
    boolean is_template?;
    string[] topics?;
    boolean has_issues?;
    boolean has_projects?;
    boolean has_wiki?;
    boolean has_pages?;
    boolean has_downloads?;
    boolean has_discussions?;
    boolean archived?;
    boolean disabled?;
    string visibility?;
    string? pushed_at?;
    string? created_at?;
    string? updated_at?;
    Repository_template_repository_permissions permissions?;
    string role_name?;
    string temp_clone_token?;
    boolean delete_branch_on_merge?;
    int subscribers_count?;
    int network_count?;
    # Code Of Conduct
    CodeOfConduct code_of_conduct?;
    Minimalrepository_license? license?;
    int forks?;
    int open_issues?;
    int watchers?;
    boolean allow_forking?;
    boolean web_commit_signoff_required?;
    SecurityAndAnalysis? security_and_analysis?;
};

# Timeline Assigned Issue Event
public type TimelineAssignedIssueEvent record {
    int id;
    string node_id;
    string url;
    # A GitHub user.
    SimpleUser actor;
    string event;
    string? commit_id;
    string? commit_url;
    string created_at;
    # GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    NullableIntegration? performed_via_github_app;
    # A GitHub user.
    SimpleUser assignee;
};

# The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
public type Issue record {
    "resolved"|"off-topic"|"too heated"|"spam"? active_lock_reason;
    User_2? assignee?;
    User_2[] assignees;
    # How the author is associated with the repository.
    "COLLABORATOR"|"CONTRIBUTOR"|"FIRST_TIMER"|"FIRST_TIME_CONTRIBUTOR"|"MANNEQUIN"|"MEMBER"|"NONE"|"OWNER" author_association;
    # Contents of the issue
    string? body;
    string? closed_at;
    int comments;
    string comments_url;
    string created_at;
    boolean draft?;
    string events_url;
    string html_url;
    int id;
    Label[] labels?;
    string labels_url;
    boolean locked?;
    # A collection of related issues and pull requests.
    Milestone? milestone;
    string node_id;
    int number;
    # GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    App_6? performed_via_github_app?;
    Issue_pull_request pull_request?;
    Reactions reactions;
    string repository_url;
    # State of the issue; either 'open' or 'closed'
    "open"|"closed" state?;
    string? state_reason?;
    string timeline_url?;
    # Title of the issue
    string title;
    string updated_at;
    # URL for the issue
    string url;
    User_2? user;
};

public type Issue_number_labels_body_1 record {
    # The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see "[Set labels for an issue](https://docs.github.com/rest/issues/labels#set-labels-for-an-issue)."
    // @constraint:Array {minLength: 1}
    string[] labels?;
}|string[]|record {
    // @constraint:Array {minLength: 1}
    Reposownerrepoissuesissue_numberlabels_labels[] labels?;
    }|record {string name;}[]|string;

# Timeline Reviewed Event
public type TimelineReviewedEvent record {
    string event;
    # Unique identifier of the review
    int id;
    string node_id;
    # A GitHub user.
    SimpleUser user;
    # The text of the review.
    string? body;
    string state;
    string html_url;
    string pull_request_url;
    Timelinereviewedevent__links _links;
    string submitted_at?;
    # A commit SHA for the review.
    string commit_id;
    string body_html?;
    string body_text?;
    # How the author is associated with the repository.
    AuthorAssociation author_association;
};

public type Labels_name_body record {
    # The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
    string new_name?;
    # The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
    string color?;
    # A short description of the label. Must be 100 characters or fewer.
    string description?;
};

# Locked Issue Event
public type LockedIssueEvent record {
    int id;
    string node_id;
    string url;
    # A GitHub user.
    SimpleUser actor;
    string event;
    string? commit_id;
    string? commit_url;
    string created_at;
    # GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    NullableIntegration? performed_via_github_app;
    string? lock_reason;
};

public type Repo_milestones_body record {
    # The title of the milestone.
    string title;
    # The state of the milestone. Either `open` or `closed`.
    "open"|"closed" state = "open";
    # A description of the milestone.
    string description?;
    # The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
    string due_on?;
};

# A GitHub user.
public type NullableSimpleUser record {
    string? name?;
    string? email?;
    string login;
    int id;
    string node_id;
    string avatar_url;
    string? gravatar_id;
    string url;
    string html_url;
    string followers_url;
    string following_url;
    string gists_url;
    string starred_url;
    string subscriptions_url;
    string organizations_url;
    string repos_url;
    string events_url;
    string received_events_url;
    string 'type;
    boolean site_admin;
    string starred_at?;
};

public type IssueEventDismissedReview record {
    string state;
    int review_id;
    string? dismissal_message;
    string? dismissal_commit_id?;
};

# Identifying information for the git-user
public type Gitcommit_author record {
    # Timestamp of the commit
    string date;
    # Git email address of the user
    string email;
    # Name of the git user
    string name;
};

public type Issue_number_labels_body record {
    # The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see "[Add labels to an issue](https://docs.github.com/rest/issues/labels#add-labels-to-an-issue)."
    // @constraint:Array {minLength: 1}
    string[] labels?;
}|string[]|record {
    // @constraint:Array {minLength: 1}
    Reposownerrepoissuesissue_numberlabels_labels[] labels?;}|record {string name;}[]|string;

# Timeline Committed Event
public type TimelineCommittedEvent record {
    string event?;
    # SHA for the commit
    string sha;
    string node_id;
    string url;
    # Identifying information for the git-user
    Gitcommit_author author;
    # Identifying information for the git-user
    Gitcommit_author committer;
    # Message describing the purpose of the commit
    string message;
    Gitcommit_tree tree;
    Gitcommit_parents[] parents;
    Gitcommit_verification verification;
    string html_url;
};

public type Minimalrepository_license record {
    string 'key?;
    string name?;
    string spdx_id?;
    string url?;
    string node_id?;
};

public type Securityandanalysis_advanced_security record {
    "enabled"|"disabled" status?;
};

public type Issue_number_lock_body record {
    # The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  
    #  * `off-topic`  
    #  * `too heated`  
    #  * `resolved`  
    #  * `spam`
    "off-topic"|"too heated"|"resolved"|"spam" lock_reason?;
};

# A GitHub user.
public type SimpleUser record {
    string? name?;
    string? email?;
    string login;
    int id;
    string node_id;
    string avatar_url;
    string? gravatar_id;
    string url;
    string html_url;
    string followers_url;
    string following_url;
    string gists_url;
    string starred_url;
    string subscriptions_url;
    string organizations_url;
    string repos_url;
    string events_url;
    string received_events_url;
    string 'type;
    boolean site_admin;
    string starred_at?;
};

# GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
public type Integration record {
    # Unique identifier of the GitHub app
    int id;
    # The slug name of the GitHub app
    string slug?;
    string node_id;
    # A GitHub user.
    NullableSimpleUser? owner;
    # The name of the GitHub app
    string name;
    string? description;
    string external_url;
    string html_url;
    string created_at;
    string updated_at;
    # The set of permissions for the GitHub app
    Integration_permissions permissions;
    # The list of events for the GitHub app
    string[] events;
    # The number of installations associated with the GitHub app
    int installations_count?;
    string client_id?;
    string client_secret?;
    string? webhook_secret?;
    string pem?;
};

public type Repository_template_repository_permissions record {
    boolean admin?;
    boolean maintain?;
    boolean push?;
    boolean triage?;
    boolean pull?;
};

# Timeline Commit Commented Event
public type TimelineCommitCommentedEvent record {
    string event?;
    string node_id?;
    string commit_id?;
    CommitComment[] comments?;
};

# Issue Event
public type IssueEvent record {
    int id;
    string node_id;
    string url;
    # A GitHub user.
    NullableSimpleUser? actor;
    string event;
    string? commit_id;
    string? commit_url;
    string created_at;
    # Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
    NullableIssue? issue?;
    # Issue Event Label
    IssueEventLabel label?;
    # A GitHub user.
    NullableSimpleUser? assignee?;
    # A GitHub user.
    NullableSimpleUser? assigner?;
    # A GitHub user.
    NullableSimpleUser? review_requester?;
    # A GitHub user.
    NullableSimpleUser? requested_reviewer?;
    # Groups of organization members that gives permissions on specified repositories.
    Team requested_team?;
    IssueEventDismissedReview dismissed_review?;
    # Issue Event Milestone
    IssueEventMilestone milestone?;
    # Issue Event Project Card
    IssueEventProjectCard project_card?;
    # Issue Event Rename
    IssueEventRename rename?;
    # How the author is associated with the repository.
    AuthorAssociation author_association?;
    string? lock_reason?;
    # GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    NullableIntegration? performed_via_github_app?;
};

# Timeline Comment Event
public type TimelineCommentEvent record {
    string event;
    # A GitHub user.
    SimpleUser actor;
    # Unique identifier of the issue comment
    int id;
    string node_id;
    # URL for the issue comment
    string url;
    # Contents of the issue comment
    string body?;
    string body_text?;
    string body_html?;
    string html_url;
    # A GitHub user.
    SimpleUser user;
    string created_at;
    string updated_at;
    string issue_url;
    # How the author is associated with the repository.
    AuthorAssociation author_association;
    # GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    NullableIntegration? performed_via_github_app?;
    ReactionRollup reactions?;
};

# Timeline Line Commented Event
public type TimelineLineCommentedEvent record {
    string event?;
    string node_id?;
    PullRequestReviewComment[] comments?;
};

# Issue Event for Issue
public type IssueEventForIssue LabeledIssueEvent|UnlabeledIssueEvent|AssignedIssueEvent|UnassignedIssueEvent|MilestonedIssueEvent|DemilestonedIssueEvent|RenamedIssueEvent|ReviewRequestedIssueEvent|ReviewRequestRemovedIssueEvent|ReviewDismissedIssueEvent|LockedIssueEvent|AddedToProjectIssueEvent|MovedColumnInProjectIssueEvent|RemovedFromProjectIssueEvent|ConvertedNoteToIssueIssueEvent;

# Groups of organization members that gives permissions on specified repositories.
public type Team record {
    boolean deleted?;
    # Description of the team
    string? description?;
    string html_url?;
    # Unique identifier of the team
    int id;
    string members_url?;
    # Name of the team
    string name;
    string node_id?;
    Team_parent? parent?;
    # Permission that the team will have for its repositories
    string permission?;
    "open"|"closed"|"secret" privacy?;
    "notifications_enabled"|"notifications_disabled" notification_setting?;
    string repositories_url?;
    string slug?;
    # URL for the team
    string url?;
};

# A collection of related issues and pull requests.
public type NullableMilestone record {
    string url;
    string html_url;
    string labels_url;
    int id;
    string node_id;
    # The number of the milestone.
    int number;
    # The state of the milestone.
    "open"|"closed" state;
    # The title of the milestone.
    string title;
    string? description;
    # A GitHub user.
    NullableSimpleUser? creator;
    int open_issues;
    int closed_issues;
    string created_at;
    string updated_at;
    string? closed_at;
    string? due_on;
};

# The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself.
public type PullRequestReviewComment record {
    PullRequestReviewComment__links _links;
    # How the author is associated with the repository.
    "COLLABORATOR"|"CONTRIBUTOR"|"FIRST_TIMER"|"FIRST_TIME_CONTRIBUTOR"|"MANNEQUIN"|"MEMBER"|"NONE"|"OWNER" author_association;
    # The text of the comment.
    string body;
    # The SHA of the commit to which the comment applies.
    string commit_id;
    string created_at;
    # The diff of the line that the comment refers to.
    string diff_hunk;
    # HTML URL for the pull request review comment.
    string html_url;
    # The ID of the pull request review comment.
    int id;
    # The comment ID to reply to.
    int in_reply_to_id?;
    # The line of the blob to which the comment applies. The last line of the range for a multi-line comment
    int? line;
    # The node ID of the pull request review comment.
    string node_id;
    # The SHA of the original commit to which the comment applies.
    string original_commit_id;
    # The line of the blob to which the comment applies. The last line of the range for a multi-line comment
    int? original_line;
    # The index of the original line in the diff to which the comment applies.
    int original_position;
    # The first line of the range for a multi-line comment.
    int? original_start_line;
    # The relative path of the file to which the comment applies.
    string path;
    # The line index in the diff to which the comment applies.
    int? position;
    # The ID of the pull request review to which the comment belongs.
    int? pull_request_review_id;
    # URL for the pull request that the review comment belongs to.
    string pull_request_url;
    Reactions reactions;
    # The side of the first line of the range for a multi-line comment.
    "LEFT"|"RIGHT" side;
    # The first line of the range for a multi-line comment.
    int? start_line;
    # The side of the first line of the range for a multi-line comment.
    "LEFT"|"RIGHT"? start_side;
    # The level at which the comment is targeted, can be a diff line or a file.
    "line"|"file" subject_type?;
    string updated_at;
    # URL for the pull request review comment
    string url;
    User? user;
};

# Timeline Event
public type TimelineIssueEvents LabeledIssueEvent|UnlabeledIssueEvent|MilestonedIssueEvent|DemilestonedIssueEvent|RenamedIssueEvent|ReviewRequestedIssueEvent|ReviewRequestRemovedIssueEvent|ReviewDismissedIssueEvent|LockedIssueEvent|AddedToProjectIssueEvent|MovedColumnInProjectIssueEvent|RemovedFromProjectIssueEvent|ConvertedNoteToIssueIssueEvent|TimelineCommentEvent|TimelineCrossReferencedEvent|TimelineCommittedEvent|TimelineReviewedEvent|TimelineLineCommentedEvent|TimelineCommitCommentedEvent|TimelineAssignedIssueEvent|TimelineUnassignedIssueEvent|StateChangeIssueEvent;

# A collection of related issues and pull requests.
public type Milestone record {
    string? closed_at;
    int closed_issues;
    string created_at;
    User_2? creator;
    string? description;
    string? due_on;
    string html_url;
    int id;
    string labels_url;
    string node_id;
    # The number of the milestone.
    int number;
    int open_issues;
    # The state of the milestone.
    "open"|"closed" state;
    # The title of the milestone.
    string title;
    string updated_at;
    string url;
};

# Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
public type NullableIssue record {
    int id;
    string node_id;
    # URL for the issue
    string url;
    string repository_url;
    string labels_url;
    string comments_url;
    string events_url;
    string html_url;
    # Number uniquely identifying the issue within its repository
    int number;
    # State of the issue; either 'open' or 'closed'
    string state;
    # The reason for the current state
    "completed"|"reopened"|"not_planned" state_reason?;
    # Title of the issue
    string title;
    # Contents of the issue
    string? body?;
    # A GitHub user.
    NullableSimpleUser? user;
    # Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
    (string|record {int id?; string node_id?; string url?; string name?; string? description?; string? color?; boolean default?;})[] labels;
    # A GitHub user.
    NullableSimpleUser? assignee;
    SimpleUser[]? assignees?;
    # A collection of related issues and pull requests.
    NullableMilestone? milestone;
    boolean locked;
    string? active_lock_reason?;
    int comments;
    Issue_pull_request pull_request?;
    string? closed_at;
    string created_at;
    string updated_at;
    boolean draft?;
    # A GitHub user.
    NullableSimpleUser? closed_by?;
    string body_html?;
    string body_text?;
    string timeline_url?;
    # A git repository
    Repository repository?;
    # GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    NullableIntegration? performed_via_github_app?;
    # How the author is associated with the repository.
    AuthorAssociation author_association;
    ReactionRollup reactions?;
};

public type Reviewdismissedissueevent_dismissed_review record {
    string state;
    int review_id;
    string? dismissal_message;
    string dismissal_commit_id?;
};

# The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment) itself.
public type IssueComment record {
    # How the author is associated with the repository.
    "COLLABORATOR"|"CONTRIBUTOR"|"FIRST_TIMER"|"FIRST_TIME_CONTRIBUTOR"|"MANNEQUIN"|"MEMBER"|"NONE"|"OWNER" author_association;
    # Contents of the issue comment
    string body;
    string created_at;
    string html_url;
    # Unique identifier of the issue comment
    int id;
    string issue_url;
    string node_id;
    # GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    NullableIntegration? performed_via_github_app;
    Reactions reactions;
    string updated_at;
    # URL for the issue comment
    string url;
    User? user;
};

# Renamed Issue Event
public type RenamedIssueEvent record {
    int id;
    string node_id;
    string url;
    # A GitHub user.
    SimpleUser actor;
    string event;
    string? commit_id;
    string? commit_url;
    string created_at;
    # GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    NullableIntegration? performed_via_github_app;
    Renamedissueevent_rename rename;
};

# Enable or disable Dependabot security updates for the repository.
public type Securityandanalysis_dependabot_security_updates record {
    # The enablement status of Dependabot security updates for the repository.
    "enabled"|"disabled" status?;
};

# Thread
public type _Thread record {
    string id;
    # Minimal Repository
    MinimalRepository repository;
    Thread_subject subject;
    string reason;
    boolean unread;
    string updated_at;
    string? last_read_at;
    string url;
    string subscription_url;
};

public type Gitcommit_parents record {
    # SHA for the commit
    string sha;
    string url;
    string html_url;
};

public type Issues_issue_number_body record {
    # The title of the issue.
    string|int? title?;
    # The contents of the issue.
    string? body?;
    # Username to assign to this issue. **This field is deprecated.**
    string? assignee?;
    # The open or closed state of the issue.
    "open"|"closed" state?;
    # The reason for the state change. Ignored unless `state` is changed.
    "completed"|"not_planned"|"reopened" state_reason?;
    string|int? milestone?;
    # Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped.
    (string|record {int id?; string name?; string? description?; string? color?;})[] labels?;
    # Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped.
    string[] assignees?;
};

public type Issue_number_assignees_body record {
    # Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._
    string[] assignees?;
};

# How the author is associated with the repository.
public type AuthorAssociation "COLLABORATOR"|"CONTRIBUTOR"|"FIRST_TIMER"|"FIRST_TIME_CONTRIBUTOR"|"MANNEQUIN"|"MEMBER"|"NONE"|"OWNER";

public type User record {
    string avatar_url?;
    boolean deleted?;
    string? email?;
    string events_url?;
    string followers_url?;
    string following_url?;
    string gists_url?;
    string gravatar_id?;
    string html_url?;
    int id;
    string login;
    string name?;
    string node_id?;
    string organizations_url?;
    string received_events_url?;
    string repos_url?;
    boolean site_admin?;
    string starred_url?;
    string subscriptions_url?;
    "Bot"|"User"|"Organization" 'type?;
    string url?;
};

public type Reactions record {
    int \+1;
    int \-1;
    int confused;
    int eyes;
    int heart;
    int hooray;
    int laugh;
    int rocket;
    int total_count;
    string url;
};

# Added to Project Issue Event
public type AddedToProjectIssueEvent record {
    int id;
    string node_id;
    string url;
    # A GitHub user.
    SimpleUser actor;
    string event;
    string? commit_id;
    string? commit_url;
    string created_at;
    # GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
    NullableIntegration? performed_via_github_app;
    Addedtoprojectissueevent_project_card project_card?;
};

public type Issue_number_comments_body record {
    # The contents of the comment.
    string body;
};
